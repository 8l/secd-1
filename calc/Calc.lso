dnl --- Simple Calculator
(LETREC TEST
  (TEST LAMBDA (EXPR)
    (CFGPARSE
      (MAPFROMLIST ExpressionCFG)
      (MAPFROMLIST ExpressionDFA)
      (LAMBDA (TOKEN) (IF (NUMBER TOKEN) (QUOTE ID) TOKEN))
      (LAMBDA (TOKEN) (STOP (CONS (QUOTE ParseError) TOKEN)))
      (FLATTENEXPR EXPR)
      EVAL))

  dnl --- Flattens the list, turning the beginning and end of sub-lists
  dnl     into OPENP & CLOSEP tokens, respectively.
  (FLATTENEXPR LAMBDA (L)
    (LETREC
      (FLATTENCC L (QUOTE NIL))
      (FLATTENCC LAMBDA (L CC)
        (IF (ISNIL L)
            (REVERSE CC)
        (IF (ATOM (CAR L))
            (FLATTENCC (CDR L) (CONS (CAR L) CC))
            (FLATTENCC
              (APPEND
                (CONS (QUOTE OPENP) (CAR L))
                (CONS (QUOTE CLOSEP) (CDR L)))
              CC))))))

  dnl --- Recursively descend into the parse tree using pattern matching,
  dnl     evaluating the expressions as we ascend.
  (EVAL LAMBDA (TREE) (LET
    (MATCH TREE
      (CASE (_ < _)     (BINOP LT))
      (CASE (_ > _)     (BINOP GT))
      (CASE (_ <= _)    (BINOP LEQ))
      (CASE (_ >= _)    (BINOP GEQ))
      (CASE (_ == _)    (BINOP EQ))
      (CASE (_ != _)    (BINOP NEQ))
      (CASE (_ + _)     (BINOP ADD))
      (CASE (_ - _)     (BINOP SUB))
      (CASE (_ (\ *) _) (BINOP MUL))
      (CASE (_ / _)     (BINOP DIV))
      (CASE (* _ *)     _1)
      (CASE (#_)        _1)
      (CASE (_)         _1)
      (CASE _           (STOP (LIST (QUOTE UnexpectedError) _1))))
    (BINOP MACRO (OP) (OP _1 _2))))

  (ExpressionCFG QUOTE
include(ExpressionCFG.lso)
    )

  (ExpressionDFA QUOTE
include(ExpressionDFA.lso)
    )

include(Cfg.lso)
include(Util.lso)
include(Pattern.lso)

  )
