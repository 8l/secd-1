(LETREC TEST

include(Util.lso)
include(Parser.lso)

  (TEST LAMBDA (E)

    (LETREC
      (LETREC

        ((START) (APPEND E (QUOTE ($))) (LAMBDA (R OUT) R))

        (SUBEXPR LAMBDA NIL (PARSE_ANY
          (QUOTE (EXPECTED SUBEXPRESSION))
          (LIST
            NESTED
            (PARSE_DELIM { (PARSE_REC EXPR) })
            (PARSE_DELIM [ (PARSE_REC EXPR) ]))))

        (EXPR$ LAMBDA NIL (PARSE_CONS_L (EXPR) $))
        (NESTED LAMBDA (IN CC)
          (IF (ATOM (CAR IN))
              (QUOTE (EXPECTED NESTED EXPRESSION))
              ((EXPR$) (APPEND (CAR IN) (QUOTE ($))) (LAMBDA (R OUT) (CC R (CDR IN))))))

        (FACTOR LAMBDA NIL (PARSE_OR NUM (SUBEXPR)))
        (TERM LAMBDA NIL (PARSE_CHAIN_L1 (FACTOR) (PARSE_OR * /)))
        (EXPR LAMBDA NIL (PARSE_CHAIN_L1 (TERM) (PARSE_OR + -)))

        (COMP_OP LAMBDA NIL (PARSE_ANY
          (QUOTE (EXPECTED COMPARE OPERATOR))
          (LIST < > <= >= = !=)))

        (COMP LAMBDA NIL
          (PARSE_MAP
            (PARSE_SEQ (LIST (EXPR) (COMP_OP) (EXPR)))
            (LAMBDA (X) (LET
              (OP L R)
              (L FIRST X)
              (OP SECOND X)
              (R THIRD X)))))

        (START LAMBDA NIL (PARSE_CONS_L (PARSE_OR (COMP) (EXPR)) $))

      )

      ($ PARSE_TOKEN (QUOTE $))
      (+ PARSE_TO (PARSE_TOKEN (QUOTE +)) (LAMBDA (A B) (ADD A B)))
      (- PARSE_TO (PARSE_TOKEN (QUOTE -)) (LAMBDA (A B) (SUB A B)))
      (* PARSE_TO (PARSE_TOKEN (QUOTE *)) (LAMBDA (A B) (MUL A B)))
      (/ PARSE_TO (PARSE_TOKEN (QUOTE /)) (LAMBDA (A B) (DIV A B)))
      (< PARSE_TO (PARSE_TOKEN (QUOTE <)) (LAMBDA (A B) (LT A B)))
      (> PARSE_TO (PARSE_TOKEN (QUOTE >)) (LAMBDA (A B) (GT A B)))
      (<= PARSE_TO (PARSE_TOKEN (QUOTE <=)) (LAMBDA (A B) (LEQ A B)))
      (>= PARSE_TO (PARSE_TOKEN (QUOTE >=)) (LAMBDA (A B) (GEQ A B)))
      (!= PARSE_TO (PARSE_TOKEN (QUOTE !=)) (LAMBDA (A B) (NEQ A B)))
      (= PARSE_TO (PARSE_TOKEN (QUOTE =)) (LAMBDA (A B) (EQ A B)))
      ([ PARSE_TOKEN (QUOTE [))
      (] PARSE_TOKEN (QUOTE ]))
      ({ PARSE_TOKEN (QUOTE {))
      (} PARSE_TOKEN (QUOTE }))
      (NUM PARSE_ELEM (QUOTE NUMBER) (LAMBDA (X) (NUMBER X))))

    ))

