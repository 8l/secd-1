dnl --- Utility functions ---
ifdef(`util_lso_m4',,`define(`util_lso_m4',1)dnl

  (SPLIT LAMBDA (L N)
    (LETREC
	  (SPLITCC L N (QUOTE NIL))
	  (SPLITCC (L N PREFIX)
	    (IF (EQ N 0)
		    (L . (REVERSE PREFIX))
			(SPLITCC (CDR L) (SUB N 1) (CONS (CAR L) PREFIX))))))

  (REVERSE LAMBDA (L)
    (LETREC
      (REVERSECC L (QUOTE NIL))
      (REVERSECC LAMBDA (L CC)
        (IF (EQ L (QUOTE NIL))
            CC
            (REVERSECC (CDR L) (CONS (CAR L) CC))))))

  (NTH LAMBDA (L N)
    (IF (EQ N 0)
        (CAR L)
        (NTH (CDR L) (SUB N 1))))

  (LENGTH LAMBDA (L)
    (LETREC
      (LENGTHCC L 0)
      (LENGTHCC LAMBDA (L CC)
        (IF (EQ L (QUOTE NIL))
            CC
            (LENGTHCC (CDR L) (ADD CC 1))))))

  (NEG LAMBDA (N)
    (MUL N -1))

  (ABS LAMBDA (N)
    (IF (LEQ N 0) (NEG N) N))

  (POW LAMBDA (B E)
    (LETREC
      (POWCC E 1)
      (POWCC LAMBDA (E CC)
        (IF (EQ E 0)
            CC
            (POWCC (SUB E 1) (MUL B CC))))))
            
  (MIN LAMBDA (X Y)
    (IF (LEQ X Y) X Y))

  (MAX LAMBDA (X Y)
    (IF (LEQ X Y) Y X))

  (XOR LAMBDA (P Q)
    (IF P (NOT Q) Q))

  (ISBOOLEAN LAMBDA (P)
    (OR (EQ P (QUOTE T)) (EQ P (QUOTE F))))

  (ISNIL LAMBDA (X)
    (EQ X (QUOTE NIL)))

  (ISZERO LAMBDA (N)
    (EQ N 0))

  (NOT LAMBDA (P)
    (IF (EQ P (QUOTE T)) (QUOTE F) (QUOTE T)))

  (GT LAMBDA (X Y)
    (NOT (LEQ X Y)))

  (LT LAMBDA (X Y)
    (NOT (LEQ Y X)))

  (GEQ LAMBDA (X Y)
    (LEQ Y X))

  (NEQ LAMBDA (X Y)
    (NOT (EQ X Y)))

  (APPEND LAMBDA (A B)
    (LETREC
      (PREPENDREVERSE (REVERSE A) B)
      (PREPENDREVERSE LAMBDA (A B)
        (IF (ISNIL A)
            B
            (PREPENDREVERSE (CDR A) (CONS (CAR A) B))))))

  (DEEPEQ LAMBDA (A B)
    (EQ (DEEPCMP A B) 0))

  (DEEPCMP LAMBDA (A B)
    (IF (ATOM A)
        (IF (ATOM B)
            (IF (EQ A B) 0 (IF (LEQ A B) -1 1))
            -1)
        (IF (ATOM B)
            1
            (LET
               (IF (EQ CARCMP 0)
                   (DEEPCMP (CDR A) (CDR B))
                   CARCMP)
               (CARCMP DEEPCMP (CAR A) (CAR B))))))

  (MAP LAMBDA (F L)
    (LETREC
      (MAPREVERSE (REVERSE L) (QUOTE NIL))
      (MAPREVERSE LAMBDA (L CC)
        (IF (ISNIL L)
            CC
            (MAPREVERSE (CDR L) (CONS (F (CAR L)) CC))))))

  (FILTER LAMBDA (P L)
    (LETREC
      (FILTERREVERSE L (QUOTE NIL))
      (FILTERREVERSE LAMBDA (L CC)
        (IF (ISNIL L)
            (REVERSE CC)
            (FILTERREVERSE (CDR L) (IF (P (CAR L))
                                       (CONS (CAR L) CC)
                                       CC))))))

  (TRACE LAMBDA (VAL MSG)
    (IF (ISNIL (PUTEXP MSG)) VAL VAL))

  (FIRST LAMBDA (L)
    (CAR L))

  (SECOND LAMBDA (L)
    (CAR (CDR L)))

  (THIRD LAMBDA (L)
    (CAR (CDR (CDR L))))

  (FOURTH LAMBDA (L)
    (CAR (CDR (CDR (CDR L)))))

  (FIFTH LAMBDA (L)
    (CAR (CDR (CDR (CDR (CDR L))))))

  (CONS1 LAMBDA (A)
    (CONS A (QUOTE NIL)))

  (CONS2 LAMBDA (A B)
    (CONS A (CONS B (QUOTE NIL))))

  (CONS3 LAMBDA (A B C)
    (CONS A (CONS B (CONS C (QUOTE NIL)))))

  (CONS4 LAMBDA (A B C D)
    (CONS A (CONS B (CONS C (CONS D (QUOTE NIL))))))

  (CONS5 LAMBDA (A B C D E)
    (CONS A (CONS B (CONS C (CONS D (CONS E (QUOTE NIL)))))))

  (INSERT LAMBDA (L N E)
    (LETREC
      (INSERTCC L N (QUOTE NIL))
      (INSERTCC LAMBDA (L N CC)
        (IF (ISZERO N)
            (INSERTCC L (SUB N 1) (CONS E CC))
        (IF (ISNIL L)
            (REVERSE CC)
            (INSERTCC (CDR L) (SUB N 1) (CONS (CAR L) CC)))))))

')dnl
