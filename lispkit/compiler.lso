dnl  ===========================================================================
dnl | Extended LispKit Lisp Compiler
dnl |
dnl | This compiler is substantially the same as the one in Henderson's [1]
dnl | book, except for the following:
dnl |
dnl |  - additional commands have been added to make use of the additional
dnl |    opcodes that have been added to the SECD machine (see secd.asm).
dnl |  - the generated code has also been modified to implement proper handling
dnl |    of tail calls (Exercise 6.6 in Henderson's book).  We also handle
dnl |    handling of tail calls when they occur within an (IF ...) expression.
dnl |  - For code compiled with this compiler, numbers do not need to be quoted.
dnl |    For example, one may use "(EQ X 0)" instead of "(EQ X (QUOTE 0))".
dnl |
dnl | NOTE: This compiler is intended to be compiled by the original LispKit
dnl |       Lisp compiler, and so must not use these extended features.
dnl |
dnl | Chapter 6 of Henderson's book describes the construction of this compiler
dnl | in detail.  The original compiler and object file, transcribed from
dnl | Appendix 2 of the book, may be found in APENDIX2.LSO and APENDIX2.LOB,
dnl | respectively.
dnl |
dnl | [1] P. Henderson, "Functional Programming: Application and Implementation",
dnl |     Prentice Hall, 1980.
dnl  ===========================================================================
dnl
        (LETREC COMPILE
            (COMPILE LAMBDA (E)
                 (COMP E (INITDEFS) (QUOTE (4 21))))
        (COMP LAMBDA (E N C)
           (IF (EQ (SUB E E) (QUOTE 0))            dnl --- is the token a number?
                (CONS (QUOTE 2) (CONS E C))
           (IF (ATOM E)
                (LET
                  (IF (EQ LOC (QUOTE NIL))
                      (IF (EQ E (QUOTE ADD))
                          (COMP (QUOTE (LETREC F
                            (F LAMBDA (X . REST)
                              (IF (EQ REST (QUOTE NIL))
                                  X
                                  (APPLY F (CONS (ADD X (CAR REST)) (CDR REST))))))) N C)
                      (IF (EQ E (QUOTE SUB))
                          (COMP (QUOTE (LAMBDA (A B) (SUB A B))) N C)
                      (IF (EQ E (QUOTE MUL))
                          (COMP (QUOTE (LETREC F
                            (F LAMBDA (X . REST)
                              (IF (EQ REST (QUOTE NIL))
                                  X
                                  (APPLY F (CONS (MUL X (CAR REST)) (CDR REST))))))) N C)
                      (IF (EQ E (QUOTE MULX))
                          (COMP (QUOTE (LAMBDA (A B) (MULX A B))) N C)
                      (IF (EQ E (QUOTE DIV))
                          (COMP (QUOTE (LAMBDA (A B) (DIV A B))) N C)
                      (IF (EQ E (QUOTE REM))
                          (COMP (QUOTE (LAMBDA (A B) (REM A B))) N C)
                      (IF (EQ E (QUOTE LEQ))
                          (COMP (QUOTE (LAMBDA (A B) (LEQ A B))) N C)
                      (IF (EQ E (QUOTE EQ))
                          (COMP (QUOTE (LAMBDA (A B) (EQ A B))) N C)
                      (IF (EQ E (QUOTE CAR))
                          (COMP (QUOTE (LAMBDA (A B) (CAR A B))) N C)
                      (IF (EQ E (QUOTE CDR))
                          (COMP (QUOTE (LAMBDA (A B) (CDR A B))) N C)
                      (IF (EQ E (QUOTE CONS))
                          (COMP (QUOTE (LAMBDA (A B) (CONS A B))) N C)
                      (IF (EQ E (QUOTE LIST))
                          (COMP (QUOTE (LAMBDA X X)) N C)
                      (IF (EQ E (QUOTE APPLY))
                          (COMP (QUOTE (LAMBDA (F X) (APPLY F X))) N C)
                      (IF (EQ E (QUOTE ATOM))
                          (COMP (QUOTE (LAMBDA (X) (ATOM X))) N C)
                      (IF (EQ E (QUOTE SYMBOL))
                          (COMP (QUOTE (LAMBDA (X) (SYMBOL X))) N C)
                      (IF (EQ E (QUOTE NUMBER))
                          (COMP (QUOTE (LAMBDA (X) (NUMBER X))) N C)
                      (IF (EQ E (QUOTE RECIPE))
                          (COMP (QUOTE (LAMBDA (X) (RECIPE X))) N C)
                      (IF (EQ E (QUOTE STOP))
                          (COMP (QUOTE (LAMBDA (X) (STOP X))) N C)
                      (IF (EQ E (QUOTE GET))
                          (COMP (QUOTE (LAMBDA NIL (GET))) N C)
                      (IF (EQ E (QUOTE PUT))
                          (COMP (QUOTE (LAMBDA (X) (PUT X))) N C)
                      (IF (EQ E (QUOTE PUTEXP))
                          (COMP (QUOTE (LAMBDA (X) (PUTEXP X))) N C)
                      (IF (EQ E (QUOTE AND))
                          (COMP (QUOTE (LETREC F
                            (F LAMBDA (X . REST)
                              (IF (EQ REST (QUOTE NIL))
                                  X
                                  (APPLY F (CONS (AND X (CAR REST)) (CDR REST))))))) N C)
                      (IF (EQ E (QUOTE OR))
                          (COMP (QUOTE (LETREC F
                            (F LAMBDA (X . REST)
                              (IF (EQ REST (QUOTE NIL))
                                  X
                                  (APPLY F (CONS (OR X (CAR REST)) (CDR REST))))))) N C)
                          (LET
                            (STOP (CONS (QUOTE ERROR) (CONS (QUOTE Undefined) E)))
                            (STOP LAMBDA (X) (
                              (CONS (QUOTE 2) (CONS X (QUOTE (21))))))))))))))))))))))))))))))
                      (COMPLOC LOC C))
                  (LOC LOCATION E (GETNAMES N)))
           (IF (EQ (CAR E) (QUOTE BEGIN))
                (IF (EQ (CDR (CDR E)) (QUOTE NIL))
                    (COMP (CAR (CDR E)) N C)
                    (COMP (CAR (CDR E)) N (CONS (QUOTE 30) (COMP (CONS (QUOTE BEGIN) (CDR (CDR E))) N C))))
           (IF (EQ (CAR E) (QUOTE LIST))
                (IF (EQ (CDR E) (QUOTE NIL))
                    (CONS (QUOTE 2) (CONS (QUOTE NIL) C))
                    (COMP (CONS (QUOTE LIST) (CDR (CDR E))) N (COMP (CAR (CDR E)) N (CONS (QUOTE 13) C))))
           (IF (EQ (CAR E) (QUOTE APPLY))
                (LET
                  (COMP (CAR (CDR (CDR E))) N
                    (COMP (CAR (CDR E)) N APC))
                  (APC IF (EQ (CAR C) (QUOTE 5))
                    (CONS (QUOTE 26) (CDR C))
                    (CONS (QUOTE 4) C)))
           (IF (EQ (CAR E) (QUOTE NOP))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 0) C))
           (IF (EQ (CAR E) (QUOTE QUOTE))
                (CONS (QUOTE 2) (CONS (CAR (CDR E)) C))
           (IF (EQ (CAR E) (QUOTE ADD))
                (IF (EQ (CDR (CDR E)) (QUOTE NIL))
                    (COMP (CAR (CDR E)) N C)
                (IF (EQ (CDR (CDR (CDR E))) (QUOTE NIL))
                    (COMP (CAR (CDR E)) N (COMP (CAR (CDR (CDR E))) N (CONS (QUOTE 15) C)))
                    (COMP
                      (CONS (QUOTE ADD)
                        (CONS
                          (CONS (QUOTE ADD)
                            (CONS (CAR (CDR E))
                              (CONS (CAR (CDR (CDR E))) (QUOTE NIL))))
                          (CDR (CDR (CDR E))))) N C)))
           (IF (EQ (CAR E) (QUOTE SUB))
                (COMP (CAR (CDR E)) N (COMP (CAR (CDR (CDR E))) N (CONS (QUOTE 16) C)))
           (IF (EQ (CAR E) (QUOTE MUL))
                (IF (EQ (CDR (CDR E)) (QUOTE NIL))
                    (COMP (CAR (CDR E)) N C)
                (IF (EQ (CDR (CDR (CDR E))) (QUOTE NIL))
                    (COMP (CAR (CDR E)) N (COMP (CAR (CDR (CDR E))) N (CONS (QUOTE 17) C)))
                    (COMP
                      (CONS (QUOTE MUL)
                        (CONS
                          (CONS (QUOTE MUL)
                            (CONS (CAR (CDR E))
                              (CONS (CAR (CDR (CDR E))) (QUOTE NIL))))
                          (CDR (CDR (CDR E))))) N C)))
           (IF (EQ (CAR E) (QUOTE MULX))
                (COMP (CAR (CDR E)) N (COMP (CAR (CDR (CDR E))) N (CONS (QUOTE 28) C)))
           (IF (EQ (CAR E) (QUOTE DIV))
                (COMP (CAR (CDR E)) N (COMP (CAR (CDR (CDR E))) N (CONS (QUOTE 18) C)))
           (IF (EQ (CAR E) (QUOTE REM))
                (COMP (CAR (CDR E)) N (COMP (CAR (CDR (CDR E))) N (CONS (QUOTE 19) C)))
           (IF (EQ (CAR E) (QUOTE LEQ))
                (COMP (CAR (CDR E)) N (COMP (CAR (CDR (CDR E))) N (CONS (QUOTE 20) C)))
           (IF (EQ (CAR E) (QUOTE EQ))
                (COMP (CAR (CDR E)) N (COMP (CAR (CDR (CDR E))) N (CONS (QUOTE 14) C)))
           (IF (EQ (CAR E) (QUOTE CAR))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 10) C))
           (IF (EQ (CAR E) (QUOTE CDR))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 11) C))
           (IF (EQ (CAR E) (QUOTE ATOM))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 12) C))
           (IF (EQ (CAR E) (QUOTE SYMBOL))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 22) C))
           (IF (EQ (CAR E) (QUOTE NUMBER))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 23) C))
           (IF (EQ (CAR E) (QUOTE RECIPE))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 52) C))
           (IF (EQ (CAR E) (QUOTE STOP))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 21) C))
           (IF (EQ (CAR E) (QUOTE GET))
                (CONS (QUOTE 24) C)
           (IF (EQ (CAR E) (QUOTE PUT))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 25) C))
           (IF (EQ (CAR E) (QUOTE PUTEXP))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 29) C))
           (IF (EQ (CAR E) (QUOTE J))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 48) C))
           (IF (EQ (CAR E) (QUOTE INVOKEJ))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 49) C))
           (IF (EQ (CAR E) (QUOTE CVEC))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 31) C))
           (IF (EQ (CAR E) (QUOTE VSET))
                (COMP (CAR (CDR (CDR (CDR E)))) N (COMP (CAR (CDR (CDR E))) N (COMP (CAR (CDR E)) N (CONS (QUOTE 32) C))))
           (IF (EQ (CAR E) (QUOTE VREF))
                (COMP (CAR (CDR (CDR E))) N (COMP (CAR (CDR E)) N (CONS (QUOTE 33) C)))
           (IF (EQ (CAR E) (QUOTE VLEN))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 34) C))
           (IF (EQ (CAR E) (QUOTE VCPY))
                (COMP (CAR (CDR (CDR (CDR (CDR (CDR E)))))) N (COMP (CAR (CDR (CDR (CDR (CDR E))))) N (COMP (CAR (CDR (CDR (CDR E)))) N (COMP (CAR (CDR (CDR E))) N (COMP (CAR (CDR E)) N (CONS (QUOTE 35) C))))))
           (IF (EQ (CAR E) (QUOTE CBIN))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 36) C))
           (IF (EQ (CAR E) (QUOTE BSET))
                (COMP (CAR (CDR (CDR (CDR E)))) N (COMP (CAR (CDR (CDR E))) N (COMP (CAR (CDR E)) N (CONS (QUOTE 37) C))))
           (IF (EQ (CAR E) (QUOTE BREF))
                (COMP (CAR (CDR (CDR E))) N (COMP (CAR (CDR E)) N (CONS (QUOTE 38) C)))
           (IF (EQ (CAR E) (QUOTE BLEN))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 39) C))
           (IF (EQ (CAR E) (QUOTE BCPY))
                (COMP (CAR (CDR (CDR (CDR (CDR (CDR E)))))) N (COMP (CAR (CDR (CDR (CDR (CDR E))))) N (COMP (CAR (CDR (CDR (CDR E)))) N (COMP (CAR (CDR (CDR E))) N (COMP (CAR (CDR E)) N (CONS (QUOTE 40) C))))))
           (IF (EQ (CAR E) (QUOTE CONS))
                (COMP (CAR (CDR (CDR E))) N (COMP (CAR (CDR E)) N (CONS (QUOTE 13) C)))
           (IF (EQ (CAR E) (QUOTE AND))
                (IF (EQ (CDR (CDR E)) (QUOTE NIL))
                    (COMP (CAR (CDR E)) N C)
                (IF (EQ (CDR (CDR (CDR E))) (QUOTE NIL))
                    (COMP (CONS (QUOTE IF) (CONS (CAR (CDR E)) (CONS (CAR (CDR (CDR E))) (CONS (QUOTE (QUOTE F)) (QUOTE NIL))))) N C)
                    (COMP
                      (CONS (QUOTE AND)
                        (CONS
                          (CONS (QUOTE AND)
                            (CONS (CAR (CDR E))
                              (CONS (CAR (CDR (CDR E))) (QUOTE NIL))))
                          (CDR (CDR (CDR E))))) N C)))
           (IF (EQ (CAR E) (QUOTE OR))
                (IF (EQ (CDR (CDR E)) (QUOTE NIL))
                    (COMP (CAR (CDR E)) N C)
                (IF (EQ (CDR (CDR (CDR E))) (QUOTE NIL))
                    (COMP (CONS (QUOTE IF) (CONS (CAR (CDR E)) (CONS (QUOTE (QUOTE T)) (CONS (CAR (CDR (CDR E))) (QUOTE NIL))))) N C)
                    (COMP
                      (CONS (QUOTE OR)
                        (CONS
                          (CONS (QUOTE OR)
                            (CONS (CAR (CDR E))
                              (CONS (CAR (CDR (CDR E))) (QUOTE NIL))))
                          (CDR (CDR (CDR E))))) N C)))
           (IF (EQ (CAR E) (QUOTE IF))
                (IF (EQ (CAR C) (QUOTE 5))
                     (LET (COMP (CAR (CDR E)) N (CONS (QUOTE 27)
                                                 (CONS THENPT (CONS ELSEPT C))))
                     (THENPT COMP (CAR (CDR (CDR E))) N (QUOTE (5)))
                     (ELSEPT COMP (CAR (CDR (CDR (CDR E)))) N (QUOTE (5)))  )
                     (LET (COMP (CAR (CDR E)) N (CONS (QUOTE 8)
                                                 (CONS THENPT (CONS ELSEPT C))))
                     (THENPT COMP (CAR (CDR (CDR E))) N (QUOTE (9)))
                     (ELSEPT COMP (CAR (CDR (CDR (CDR E)))) N (QUOTE (9)))  ))
           (IF (EQ (CAR E) (QUOTE DELAY))
                (LET (CONS (QUOTE 53) (CONS BODY C))
                   (BODY COMP (CAR (CDR E)) N (QUOTE (55))))
           (IF (EQ (CAR E) (QUOTE FORCE))
                (COMP (CAR (CDR E)) N (CONS (QUOTE 54) C))
           (IF (EQ (CAR E) (QUOTE LAMBDA))
                (LET (CONS (QUOTE 3) (CONS BODY C))
                   (BODY COMP (CAR (CDR (CDR E))) (CONSFORMALS (CAR (CDR E)) N)
                                        (QUOTE (5))) )
           (IF (EQ (CAR E) (QUOTE LET))
        (LET (LET (LET (COMPLIS ARGS N (CONS (QUOTE 3)
                         (CONS BODY
                           (IF (EQ (CAR C) (QUOTE 5))
                                (CONS (QUOTE 26) (CDR C))
                                (CONS (QUOTE 4) C)))))
                (BODY COMP (CAR (CDR E)) M (QUOTE (5))))
           (M CONSDEFS DEF N)
                (ARGS CAR (CDR DEF)))

                (DEF DEFS (CDR (CDR E))))
           (IF (EQ (CAR E) (QUOTE LETREC))
                (LET (LET (LET (CONS (QUOTE 6) (COMPLIS ARGS M
                        (CONS (QUOTE 3) (CONS BODY (CONS (QUOTE 7) C)))))
                (BODY COMP (CAR (CDR E)) M (QUOTE (5))))
             (M CONSDEFS DEF N)
             (ARGS CAR (CDR DEF)))
             (DEF DEFS (CDR (CDR E))))
        (LET
          (IF (EQ MINDEX (QUOTE NIL))
              (COMPLIS (CDR E) N (COMP (CAR E) N
               (IF (EQ (CAR C) (QUOTE 5))
                    (CONS (QUOTE 26) (CDR C))
                    (CONS (QUOTE 4) C))))
              (LET
                (COMP (SUBST (CAR (CDR (CDR MEXPR))) (CAR (CDR MEXPR)) (CDR E)) N C)
                (MEXPR ELEM (CDR MINDEX) (ELEM (CAR MINDEX) (GETMEXPRS N)))))
          (MINDEX LOCATION (CAR E) (GETMVARS N))))))))))))))))))))))))))))))))))))))))))))))))))
        (COMPLIS LAMBDA (E N C)
           (IF (EQ E (QUOTE NIL)) (CONS (QUOTE 2) (CONS (QUOTE NIL) C))
                (COMPLIS (CDR E) N (COMP (CAR E) N (CONS (QUOTE 13) C)))))
        (COMPLOC LAMBDA (LOC C)
          (IF (ATOM (CDR LOC))
              (CONS (QUOTE 1) (CONS LOC C))
          (IF (EQ (CAR (CDR LOC)) (QUOTE 0))
              (CONS (QUOTE 1) (CONS (CAR LOC) C))
              (COMPLOC (CONS (CAR LOC) (CONS (SUB (CAR (CDR LOC)) (QUOTE 1)) (QUOTE NIL)))
                (CONS (QUOTE 11) C)))))
        (SUBST LAMBDA (E A M)
          (IF (EQ E (QUOTE NIL))
              (QUOTE NIL)
          (IF (ATOM E)
              (LET
                (IF (EQ INDEX (QUOTE NIL)) E (ELEM INDEX M))
                (INDEX FIND E A))
              (CONS (SUBST (CAR E) A M) (SUBST (CDR E) A M)))))
        (ELEM LAMBDA (N L)
          (IF (EQ N (QUOTE 0))
              (CAR L)
              (ELEM (SUB N (QUOTE 1)) (CDR L))))
        (LOCATION LAMBDA (X LL)
          (LOCATIONREC X LL (QUOTE 0)))
        (LOCATIONREC LAMBDA (X LL ACC)
          (IF (EQ LL (QUOTE NIL))
              (QUOTE NIL)
              (LET
                (IF (EQ INDEX (QUOTE NIL))
                    (LOCATIONREC X (CDR LL) (ADD ACC (QUOTE 1)))
                    (CONS ACC INDEX))
                (INDEX FIND* X (CAR LL)))))
        (FIND LAMBDA (X L)
          (LET
            (IF (ATOM INDEX) INDEX (QUOTE NIL))
            (INDEX FIND* X L)))
        (FIND* LAMBDA (X L)
          (FINDREC X L (QUOTE 0)))
        (FINDREC LAMBDA (X L ACC)
          (IF (EQ L (QUOTE NIL))
              (QUOTE NIL)
          (IF (ATOM L)
              (IF (EQ X L)
                  (CONS ACC (QUOTE NIL))
                  (QUOTE NIL))
          (IF (EQ X (CAR L))
              ACC
              (FINDREC X (CDR L) (ADD ACC (QUOTE 1)))))))
        (CONSDEFS LAMBDA (D DD)
          (LET
            (CONS N (CONS MV ME))
            (N CONS (CAR D) (CAR DD))
            (MV CONS (CAR (CDR (CDR D))) (CAR (CDR DD)))
            (ME CONS (CDR (CDR (CDR D))) (CDR (CDR DD)))))
        (CONSFORMALS LAMBDA (ARGS DD)
          (LET
            (CONS N (CONS MV ME))
            (N CONS ARGS (CAR DD))
            (MV CAR (CDR DD))
            (ME CDR (CDR DD))))
        (INITDEFS LAMBDA NIL
          (CONS (QUOTE NIL) (CONS (QUOTE NIL) (QUOTE NIL))))
        (GETNAMES LAMBDA (N) (CAR N))
        (GETMVARS LAMBDA (N) (CAR (CDR N)))
        (GETMEXPRS LAMBDA (N) (CDR (CDR N)))
        (DEFS LAMBDA (D)
          (DEFSREC D (QUOTE NIL) (QUOTE NIL) (QUOTE NIL) (QUOTE NIL)))
        (DEFSREC LAMBDA (D VARS EXPRS MVARS MEXPRS)
          (IF (EQ D (QUOTE NIL))
              (CONS VARS (CONS EXPRS (CONS MVARS MEXPRS)))
          (IF (EQ (CAR (CDR (CAR D))) (QUOTE MACRO))
              (DEFSREC (CDR D) VARS EXPRS (CONS (CAR (CAR D)) MVARS) (CONS (CDR (CAR D)) MEXPRS))
              (DEFSREC (CDR D) (CONS (CAR (CAR D)) VARS) (CONS (CDR (CAR D)) EXPRS) MVARS MEXPRS)))) )
