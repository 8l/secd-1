dnl  ===========================================================================
dnl | Lexical analyser for Scheme (R5RS)
dnl |
dnl | See http://www.schemers.org/Documents/Standards/R5RS/
dnl  ===========================================================================
ifdef(`lex_scheme_lso_m4',,`define(`lex_scheme_lso_m4',1)dnl

include(Util.lso)
include(Stream.lso)

  dnl  -------------------------------------------------------------------------
  dnl | Entry point for lexical analyser
  dnl | CC = continuation function.  This function should take two parameters:
  dnl |       - A token parsed from the input
  dnl |       - A re-entry function, this function should take one parameter,
  dnl |         which is to be a continuation function
  dnl |      This allows control to be passed back and forth between the lexical
  dnl |      analyser and whatever code requires tokens to be parsed from the
  dnl |      input, rather than having the lexical analyser return a list of all
  dnl |      the tokens in the input.
  dnl  -------------------------------------------------------------------------
  (LEX LAMBDA (IN) (LET
    (LEXINITIAL IN*)
    (IN* SAPPEND IN (FOREVER -1))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses the next character the input and branches accordingly.
  dnl | C = the next character
  dnl | CC = a continuation function as described in the LEX function
  dnl  -------------------------------------------------------------------------
  (LEXINITIAL LAMBDA (IN) (LET
    (IF (LEQ C 0)
        (QUOTE NIL)
    (IF (ISOPENPAREN C)
        (CONS (QUOTE (OPENP)) (LEXINITIAL (CDR IN)))
    (IF (ISCLOSEPAREN C)
        (CONS (QUOTE (CLOSEP)) (LEXINITIAL (CDR IN)))
    (IF (ISINITIAL C)
        (LEXIDENT IN)
    (IF (ISDOT C)
        (LEXSTARTSWITHDOT (CDR IN))
    (IF (ISPOUND C)
        (LEXSTARTSWITHPOUND (CDR IN))
    (IF (ISDQUOTE C)
        (LEXSTRING (CDR IN))
    (IF (ISQUOTE C)
        (CONS (QUOTE (QUOTE)) (LEXINITIAL (CDR IN)))
    (IF (ISBACKQUOTE C)
        (CONS (QUOTE (BACKQUOTE)) (LEXINITIAL (CDR IN)))
    (IF (ISCOMMA C)
        (LEXSTARTSWITHCOMMA (CDR IN))
    (IF (ISSEMI C)
        (LEXINITIAL (DROPCOMMENT IN))
    (IF (ISWHITESPACE C)
        (LEXINITIAL (DROPWHITESPACE IN))
    (IF (ISDIGIT C)
        (LEXCOMPLEX IN 10 (QUOTE NIL) DIGITVALUEDEC)
    (IF (ISPLUS C)
        (LEXSTARTSWITHSIGN (CDR IN) 43)
    (IF (ISMINUS C)
        (LEXSTARTSWITHSIGN (CDR IN) 45)
        (QUOTE ((ERROR))))))))))))))))))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses a symbol that starts with a "+" or a "-"
  dnl | C = the next character (after the sign)
  dnl | TOKEN = the token to yield assuming the sign is not part of a longer
  dnl |         token (such as a number).
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXSTARTSWITHSIGN LAMBDA (IN SIGN) (LET
    (IF (OR (ISDELIM C) (ISWHITESPACE C))
        (CONS (LIST (QUOTE VARIABLE) SIGN) (DELAY (LEXINITIAL IN)))
        (LEXCOMPLEX4 IN 10 (QUOTE NIL) DIGITVALUEDEC))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses an identifier
  dnl | C = the first character
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXIDENT LAMBDA (IN) (LET
    (CONTINUELEXIDENT (CDR IN) (LIST C))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses the remainder of an identifier (after the first character)
  dnl | C = the next character
  dnl | I = a list of the characters in the identifier so far, in reverse
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (CONTINUELEXIDENT LAMBDA (IN I) (LET
    (IF (ISSUBSEQUENT C)
        (CONTINUELEXIDENT (CDR IN) (CONS C I))
        (LET
          (LET
            (IF (ISNIL KEYWORD)
                (CONS (CONS (QUOTE VARIABLE) NAME) (DELAY (LEXINITIAL IN)))
                (CONS (LIST KEYWORD) (DELAY (LEXINITIAL IN))))
            (KEYWORD GETKEYWORD NAME))
          (NAME REVERSE I)))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses a token that starts with a dot.  It could be an ellipsis, a
  dnl | number, or just a dot).
  dnl | C = the next (second) character
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXSTARTSWITHDOT LAMBDA (IN) (LET
    (IF (ISDOT C)
        (LEXELLIPSIS (CDR IN))
    (IF (ISDIGIT C)
        (LEXREAL7 IN 10 (QUOTE NIL) DIGITVALUEDEC 43 LEXCOMPLEX1)
        (CONS (QUOTE (DOT)) (DELAY (LEXINITIAL IN)))))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses a token that starts with a comma.  It could be ",@" or just a
  dnl | comma.
  dnl | C = the next (second) character
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXSTARTSWITHCOMMA LAMBDA (IN) (LET
    (IF (ISATSIGN C)
        (CONS (QUOTE (COMMAAT)) (DELAY (LEXINITIAL (CDR IN))))
        (CONS (QUOTE (COMMA)) (DELAY (LEXINITIAL IN))))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses an ellipsis token.
  dnl | C = the next (third) character.  If it is a dot, then we have parsed an
  dnl |     ellipsis.  If not, then yield an error.
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXELLIPSIS LAMBDA (IN) (LET
    (IF (ISDOT C)
        (CONS (QUOTE (IDENT ELLIPSIS)) (DELAY (LEXENDTOKEN (CDR IN))))
        (QUOTE ((ERROR))))
    (C CAR (FORCE* IN))))
  
  dnl  -------------------------------------------------------------------------
  dnl | Analyses the end of a token -- either skipping whitespace or passing
  dnl | control along to the next analysis function.
  dnl | C = the next character
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXENDTOKEN LAMBDA (IN) (LET
    (IF (LEQ C 0)
        (QUOTE NIL)
    (IF (ISWHITESPACE C)
        (LEXINITIAL (DROPWHITESPACE IN))
    (IF (ISDELIM C)
        (LEXINITIAL IN)
        (QUOTE ((ERROR))))))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses a token that starts with a pound sign (#).  It could be a
  dnl | boolean literal ("#t" or "#f"), the beginning of a vector ("#("), a
  dnl | character token (e.g., "#\x"), or a number prefix (i.e., #e or #i).
  dnl | C = the next character
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXSTARTSWITHPOUND LAMBDA (IN) (LET
    (IF (IST C)
        (CONS (QUOTE (BOOL T)) (LEXENDTOKEN (CDR IN)))
    (IF (ISF C)
        (CONS (QUOTE (BOOL F)) (LEXENDTOKEN (CDR IN)))
    (IF (ISOPENPAREN C)
        (CONS (QUOTE (OPENVEC)) (DELAY (LEXINITIAL (CDR IN))))
    (IF (ISBACKSLASH C)
        (LEXCHARACTER (CDR IN))
    (IF (ISNUMBERPREFIX C)
        (LEXNUMBERPREFIXITEM IN (QUOTE NIL) (QUOTE NIL))
        (QUOTE ((ERROR))))))))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses subsequent number prefix items (after the first one).
  dnl | C = the next character
  dnl | BASE = the base of the number being parsed
  dnl | EXACT = a value indicating if the number being parsed is exact
  dnl | CC = the coninuation function
  dnl  -------------------------------------------------------------------------
  (LEXNUMBERPREFIX LAMBDA (IN BASE EXACT) (LET
    (IF (ISPOUND C)
        (LEXNUMBERPREFIXITEM (CDR IN) BASE EXACT)
        (LEXNUMBER IN BASE EXACT))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses a number
  dnl | C = the next character
  dnl | BASE = the base in which the number is expressed
  dnl | EXACT = a value that indicates whether the value is exact or inexact
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXNUMBER LAMBDA (IN BASE EXACT) (LET
    (LET
      (LET
        (LEXCOMPLEX IN BASE EXACT DIGITVALUE)
        (DIGITVALUE . (IF (EQ BASE 2) DIGITVALUEBIN
                      (IF (EQ BASE 8) DIGITVALUEOCT
                      (IF (EQ BASE 10) DIGITVALUEDEC
                      (IF (EQ BASE 16) DIGITVALUEHEX
                          (LAMBDA (C) (QUOTE -1))))))))
      (EXACT IF (ISNIL EXACT) (QUOTE T) EXACT)
      (BASE IF (ISNIL BASE) 10 BASE))
    (C CAR (FORCE* IN))))

  dnl  =========================================================================
  dnl | The following functions analyse a number token from the input, which has
  dnl | the grammar below (reproduced from R5RS).  To build these functions, the
  dnl | grammar was rewritten as an LL(1) grammar and the corresponding DFA was
  dnl | designed by hand based on that grammar.  The numeric suffixes on the
  dnl | function names correspond to a node in the DFA.
  dnl  -------------------------------------------------------------------------
  dnl |
  dnl | Grammar for a number in Scheme (reproduced from R5RS):
  dnl |
  dnl |   <number> --> <num 2>| <num 8>
  dnl |        | <num 10>| <num 16>
  dnl |   
  dnl |   The following rules for <num R>, <complex R>, <real R>, <ureal R>,
  dnl |   <uinteger R>, and <prefix R> should be replicated for R = 2, 8, 10,
  dnl |   and 16. There are no rules for <decimal 2>, <decimal 8>, and
  dnl |   <decimal 16>, which means that numbers containing decimal points or
  dnl |   exponents must be in decimal radix.
  dnl |   
  dnl |   <num R> --> <prefix R> <complex R>
  dnl |   <complex R> --> <real R> | <real R> @ <real R>
  dnl |       | <real R> + <ureal R> i | <real R> - <ureal R> i
  dnl |       | <real R> + i | <real R> - i
  dnl |       | + <ureal R> i | - <ureal R> i | + i | - i
  dnl |   <real R> --> <sign> <ureal R>
  dnl |   <ureal R> --> <uinteger R>
  dnl |       | <uinteger R> / <uinteger R>
  dnl |       | <decimal R>
  dnl |   <decimal 10> --> <uinteger 10> <suffix>
  dnl |       | . <digit 10>+ #* <suffix>
  dnl |       | <digit 10>+ . <digit 10>* #* <suffix>
  dnl |       | <digit 10>+ #+ . #* <suffix>
  dnl |   <uinteger R> --> <digit R>+ #*
  dnl |   <prefix R> --> <radix R> <exactness>
  dnl |       | <exactness> <radix R>
  dnl |   
  dnl |   
  dnl |   <suffix> --> <empty> 
  dnl |       | <exponent marker> <sign> <digit 10>+
  dnl |   <exponent marker> --> e | s | f | d | l
  dnl |   <sign> --> <empty>  | + |  -
  dnl |   <exactness> --> <empty> | #i | #e
  dnl |   <radix 2> --> #b
  dnl |   <radix 8> --> #o
  dnl |   <radix 10> --> <empty> | #d
  dnl |   <radix 16> --> #x
  dnl |   <digit 2> --> 0 | 1
  dnl |   <digit 8> --> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7
  dnl |   <digit 10> --> <digit>
  dnl |   <digit 16> --> <digit 10> | a | b | c | d | e | f 
  dnl |   
  dnl  =========================================================================

  (LEXCOMPLEX LAMBDA (IN BASE EXACT DIGITVALUE) (LET
    (IF (ISSIGN C)
        (LEXCOMPLEX4 (CDR IN) BASE EXACT DIGITVALUE)
        (LEXUREAL IN BASE EXACT DIGITVALUE LEXCOMPLEX1))
    (C CAR (FORCE* IN))))

  (LEXCOMPLEX1 LAMBDA (IN BASE EXACT DIGITVALUE) (LET
    (IF (ISSIGN C)
        (LEXCOMPLEX7 (CDR IN) BASE EXACT DIGITVALUE)
    (IF (ISATSIGN C)
        (LEXCOMPLEX2 (CDR IN) BASE EXACT DIGITVALUE)
        (CONS (QUOTE (NUMBER)) (DELAY (LEXINITIAL IN)))))
    (C CAR (FORCE* IN))))

  (LEXCOMPLEX2 LAMBDA (IN BASE EXACT DIGITVALUE)
    (LEXREAL IN BASE EXACT DIGITVALUE (QUOTE NIL) LEXCOMPLEX3))

  (LEXCOMPLEX3 LAMBDA (IN BASE EXACT DIGITVALUE)
    (CONS (QUOTE (NUMBER)) (DELAY (LEXINITIAL IN))))

  (LEXCOMPLEX4 LAMBDA (IN BASE EXACT DIGITVALUE) (LET
    (IF (ISIMAGUNIT C)
        (LEXCOMPLEX5 (CDR IN) BASE EXACT DIGITVALUE)
        (LEXUREAL IN BASE EXACT DIGITVALUE LEXCOMPLEX6))
    (C CAR (FORCE* IN))))

  (LEXCOMPLEX5 LAMBDA (IN BASE EXACT DIGITVALUE)
    (CONS (QUOTE (NUMBER)) (DELAY (LEXINITIAL IN))))

  (LEXCOMPLEX6 LAMBDA (IN BASE EXACT DIGITVALUE) (LET
    (IF (ISSIGN C)
        (LEXCOMPLEX7 (CDR IN) BASE EXACT DIGITVALUE)
    (IF (ISATSIGN C)
        (LEXCOMPLEX2 (CDR IN) BASE EXACT DIGITVALUE)
    (IF (ISIMAGUNIT C)
        (LEXCOMPLEX5 (CDR IN) BASE EXACT DIGITVALUE)
        (CONS (QUOTE (NUMBER)) (DELAY (LEXINITIAL IN))))))
    (C CAR (FORCE* IN))))

  (LEXCOMPLEX7 LAMBDA (IN BASE EXACT DIGITVALUE) (LET
    (IF (ISIMAGUNIT C)
        (LEXCOMPLEX5 (CDR IN) BASE EXACT DIGITVALUE)
        (LEXUREAL IN BASE EXACT DIGITVALUE LEXCOMPLEX8))
    (C CAR (FORCE* IN))))

  (LEXCOMPLEX8 LAMBDA (IN BASE EXACT DIGITVALUE) (LET
    (IF (ISIMAGUNIT C)
        (LEXCOMPLEX5 (CDR IN) BASE EXACT DIGITVALUE)
        (QUOTE ((ERROR))))
    (C CAR (FORCE* IN))))

  (LEXUREAL LAMBDA (IN BASE EXACT DIGITVALUE TERMINAL)
    (LEXREAL IN BASE EXACT DIGITVALUE 43 TERMINAL))

  (LEXREAL LAMBDA (IN BASE EXACT DIGITVALUE SIGN TERMINAL) (LET
    (IF (ISSIGN C)
        (IF (ISNIL SIGN)
            (LEXREAL1 (CDR IN) BASE EXACT DIGITVALUE C TERMINAL)
            (QUOTE ((ERROR))))
    (IF (ISDOT C)
        (IF (EQ BASE 10)
            (LEXREAL7 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
            (QUOTE ((ERROR))))
        (LET
          (IF (GEQ DIGIT 0)
              (LEXREAL2 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
              (QUOTE ((ERROR))))
          (DIGIT DIGITVALUE C))))
    (C CAR (FORCE* IN))))

  (LEXREAL1 LAMBDA (IN BASE EXACT DIGITVALUE SIGN TERMINAL) (LET
    (IF (ISDOT C)
        (IF (EQ BASE 10)
            (LEXREAL7 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
            (QUOTE ((ERROR))))
        (LET
          (IF (GEQ DIGIT 0)
              (LEXREAL2 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
              (QUOTE ((ERROR))))
          (DIGIT DIGITVALUE C)))
    (C CAR (FORCE* IN))))

  (LEXREAL2 LAMBDA (IN BASE EXACT DIGITVALUE SIGN TERMINAL) (LET
    (IF (ISDOT C)
        (IF (EQ BASE 10)
            (LEXREAL8 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
            (QUOTE ((ERROR))))
    (IF (ISPOUND C)
        (LEXREAL3 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
    (IF (ISEXPONENTMARKER C)
        (LEXREAL10 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
    (IF (ISSLASH C)
        (LEXREAL4 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
        (LET
          (IF (GEQ DIGIT 0)
              (LEXREAL2 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
              (TERMINAL IN BASE EXACT DIGITVALUE))
          (DIGIT DIGITVALUE C))))))
    (C CAR (FORCE* IN))))

  (LEXREAL3 LAMBDA (IN BASE EXACT DIGITVALUE SIGN TERMINAL) (LET
    (IF (ISDOT C)
        (IF (EQ BASE 10)
            (LEXREAL9 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
            (QUOTE ((ERROR))))
    (IF (ISPOUND C)
        (LEXREAL3 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
    (IF (ISSLASH C)
        (LEXREAL4 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
        (TERMINAL IN BASE EXACT DIGITVALUE))))
    (C CAR (FORCE* IN))))

  (LEXREAL4 LAMBDA (IN BASE EXACT DIGITVALUE SIGN TERMINAL) (LET
    (LET
      (IF (GEQ DIGIT 0)
          (LEXREAL5 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
          (QUOTE ((ERROR))))
      (DIGIT DIGITVALUE C))
    (C CAR (FORCE* IN))))

  (LEXREAL5 LAMBDA (IN BASE EXACT DIGITVALUE SIGN TERMINAL) (LET
    (IF (ISPOUND C)
        (LEXREAL6 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
        (LET
          (IF (GEQ DIGIT 0)
              (LEXREAL5 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
              (TERMINAL IN BASE EXACT DIGITVALUE))
          (DIGIT DIGITVALUE C)))
    (C CAR (FORCE* IN))))

  (LEXREAL6 LAMBDA (IN BASE EXACT DIGITVALUE SIGN TERMINAL) (LET
    (IF (ISPOUND C)
        (LEXREAL6 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
        (TERMINAL IN BASE EXACT DIGITVALUE))
    (C CAR (FORCE* IN))))

  (LEXREAL7 LAMBDA (IN BASE EXACT DIGITVALUE SIGN TERMINAL) (LET
    (LET
      (IF (GEQ DIGIT 0)
          (LEXREAL8 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
          (QUOTE ((ERROR))))
      (DIGIT DIGITVALUE C))
    (C CAR (FORCE* IN))))

  (LEXREAL8 LAMBDA (IN BASE EXACT DIGITVALUE SIGN TERMINAL) (LET
    (IF (ISPOUND C)
        (LEXREAL9 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
    (IF (ISEXPONENTMARKER C)
        (LEXREAL10 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
        (LET
          (IF (GEQ DIGIT 0)
              (LEXREAL8 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
              (TERMINAL IN BASE EXACT DIGITVALUE))
          (DIGIT DIGITVALUE C))))
    (C CAR (FORCE* IN))))

  (LEXREAL9 LAMBDA (IN BASE EXACT DIGITVALUE SIGN TERMINAL) (LET
    (IF (ISPOUND C)
        (LEXREAL9 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
    (IF (ISEXPONENTMARKER C)
        (LEXREAL10 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
        (TERMINAL IN BASE EXACT DIGITVALUE)))
    (C CAR (FORCE* IN))))

  (LEXREAL10 LAMBDA (IN BASE EXACT DIGITVALUE SIGN TERMINAL) (LET
    (IF (ISSIGN C)
        (LEXREAL11 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
        (LET
          (IF (GEQ DIGIT 0)
              (LEXREAL12 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
              (QUOTE ((ERROR))))
          (DIGIT DIGITVALUE C)))
    (C CAR (FORCE* IN))))

  (LEXREAL11 LAMBDA (IN BASE EXACT DIGITVALUE SIGN TERMINAL) (LET
    (LET
      (IF (GEQ DIGIT 0)
          (LEXREAL12 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
          (QUOTE ((ERROR))))
      (DIGIT DIGITVALUE C))
    (C CAR (FORCE* IN))))

  (LEXREAL12 LAMBDA (IN BASE EXACT DIGITVALUE SIGN TERMINAL) (LET
    (LET
      (IF (GEQ DIGIT 0)
          (LEXREAL12 (CDR IN) BASE EXACT DIGITVALUE SIGN TERMINAL)
          (TERMINAL IN BASE EXACT DIGITVALUE))
      (DIGIT DIGITVALUE C))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses a number prefix item (either an exactness prefix item or a base
  dnl | prefix item).
  dnl | C = the next character (after the "#")
  dnl | BASE = the base of the number being analysed
  dnl | EXACT = a value indicating if the number being analysed is exact
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXNUMBERPREFIXITEM LAMBDA (IN BASE EXACT) (LET
    (IF (ISB C)             dnl --- #b = binary
        (IF (ISNIL BASE)
            (LEXNUMBERPREFIX (CDR IN) 2 EXACT)
            (QUOTE ((ERROR))))
    (IF (ISO C)             dnl --- #o = octal
        (IF (ISNIL BASE)
            (LEXNUMBERPREFIX (CDR IN) 8 EXACT)
            (QUOTE ((ERROR))))
    (IF (ISD C)             dnl --- #d = decimal
        (IF (ISNIL BASE)
            (LEXNUMBERPREFIX (CDR IN) 10 EXACT)
            (QUOTE ((ERROR))))
    (IF (ISX C)             dnl --- #x = hexadecimal
        (IF (ISNIL BASE)
            (LEXNUMBERPREFIX (CDR IN) 16 EXACT)
            (QUOTE ((ERROR))))
    (IF (ISI C)             dnl --- #i = inexact
        (IF (ISNIL EXACT)
            (LEXNUMBERPREFIX (CDR IN) BASE (QUOTE F))
            (QUOTE ((ERROR))))
    (IF (ISE C)             dnl --- #e = exact
        (IF (ISNIL EXACT)
            (LEXNUMBERPREFIX (CDR IN) BASE (QUOTE T))
            (QUOTE ((ERROR))))
        (QUOTE ((ERROR)))))))))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses a character literal.  This assumes that "#\" has been read.
  dnl | C = the next character in the token (after "#\")
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXCHARACTER LAMBDA (IN) (LET
    (IF (LEQ C 0)
        (QUOTE ((ERROR)))
    (IF (ISN C)         dnl --- could be #\newline
        (LEXCHARACTERSTARTSWITHN (CDR IN))
    (IF (ISS C)         dnl --- could be #\space
        (LEXCHARACTERSTARTSWITHS (CDR IN))
        (CONS (LIST (QUOTE CHAR) C) (DELAY (LEXINITIAL (CDR IN)))))))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses a character literal that starts with "#\n".  It could be
  dnl | "#\newline" or just "#\n".
  dnl | C = the next character in the token (after "#\n")
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXCHARACTERSTARTSWITHN LAMBDA (IN) (LET
    (IF (ISE C)
        (IF (SSTARTSWITH (QUOTE (119 108 105 110 101)) (CDR IN))
            (CONS (QUOTE (CHAR 10)) (DELAY (LEXINITIAL (DROP 6 IN))))
            (QUOTE ((ERROR))))
        (CONS (QUOTE (CHAR 110)) (DELAY (LEXINITIAL IN))))
    (C CAR (FORCE* IN))))
 
  dnl  -------------------------------------------------------------------------
  dnl | Analyses a character literal that starts with "#\s".  It could be
  dnl | "#\space" or just "#\s".
  dnl | C = the next character in the token (after "#\s")
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXCHARACTERSTARTSWITHS LAMBDA (IN) (LET
    (IF (ISP C)
        (IF (SSTARTSWITH (QUOTE (97 99 101)) (CDR IN))
            (CONS (QUOTE (CHAR 32)) (DELAY (LEXINITIAL (DROP 4 IN))))
            (QUOTE ((ERROR))))
        (CONS (QUOTE (CHAR 115)) (DELAY (LEXINITIAL IN))))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses a string literal
  dnl | C = the next character
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXSTRING LAMBDA (IN)
    (LEXSTRINGELEM IN (QUOTE NIL)))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses a string literal
  dnl | C = the next character
  dnl | S = a list of the characters already read from the string literal (in
  dnl |     reverse)
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXSTRINGELEM LAMBDA (IN S) (LET
    (IF (LEQ C 0)           dnl --- EOF in middle of string literal
        (QUOTE ((ERROR)))
    (IF (ISDQUOTE C)        dnl --- end of string literal
        (CONS (CONS (QUOTE STRING) (REVERSE S)) (DELAY (LEXINITIAL (CDR IN))))
    (IF (ISBACKSLASH C)     dnl --- escape character
        (LEXSTRINGESC (CDR IN) S)
        (LEXSTRINGELEM (CDR IN) (CONS C S)))))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Analyses an escape sequence in a string literal
  dnl | C = the character after the escape character
  dnl | S = a list of the characters already read from the string literal (in
  dnl |     reverse)
  dnl | CC = the continuation function
  dnl  -------------------------------------------------------------------------
  (LEXSTRINGESC LAMBDA (IN S) (LET
    (IF (LEQ C 0)
        (QUOTE ((ERROR)))
    (IF (ISBACKSLASH C)
        (LEXSTRINGELEM (CDR IN) (CONS C S))
    (IF (ISDQUOTE C)
        (LEXSTRINGELEM (CDR IN) (CONS C S))
    (IF (EQ C 97)
        (LEXSTRINGELEM (CDR IN) (CONS 7 S))
    (IF (EQ C 98)
        (LEXSTRINGELEM (CDR IN) (CONS 8 S))
    (IF (EQ C 116)
        (LEXSTRINGELEM (CDR IN) (CONS 9 S))
    (IF (EQ C 110)
        (LEXSTRINGELEM (CDR IN) (CONS 10 S))
    (IF (EQ C 118)
        (LEXSTRINGELEM (CDR IN) (CONS 11 S))
    (IF (EQ C 102)
        (LEXSTRINGELEM (CDR IN) (CONS 12 S))
    (IF (EQ C 114)
        (LEXSTRINGELEM (CDR IN) (CONS 13 S))
    (IF (EQ C 101)
        (LEXSTRINGELEM (CDR IN) (CONS 27 S))
    (IF (ISQUOTE C)
        (LEXSTRINGELEM (CDR IN) (CONS C S))
    (IF (ISNEWLINE C)
        (LEXSTRINGELEM (CDR IN) S)
        (QUOTE ((ERROR))))))))))))))))
    (C CAR (FORCE* IN))))

  dnl  -------------------------------------------------------------------------
  dnl | Gets the token denoting the keyword corresponding to the provided list
  dnl | of characters.
  dnl | S = the list of characters
  dnl | RETURNS the token for the corresponding keyword, or NIL if no keyword
  dnl |         corresponds to the list of characters in S
  dnl  -------------------------------------------------------------------------
  (GETKEYWORD LAMBDA (S)
    (CONTINUEGETKEYWORD S KEYWORDS))

  (CONTINUEGETKEYWORD LAMBDA (S K)
    (IF (ISNIL K)
        (QUOTE NIL)
        (IF (ISNIL S)
            (IF (SYMBOL (CAR K))
                (CAR K)
                (QUOTE NIL))
            (CONTINUEGETKEYWORD (CDR S) (TRIECHILD (CAR S) K)))))
  
  dnl  -------------------------------------------------------------------------
  dnl | Gets the child of a trie node
  dnl | C = the character indicating the child to get
  dnl | K = the parent trie node
  dnl | RETURNS the child node, or NIL if no such child exists
  dnl  -------------------------------------------------------------------------
  (TRIECHILD LAMBDA (C K)
    (IF (ISNIL K)
        K
        (IF (ISCONS (CAR K))
            (IF (EQ C (CAR (CAR K)))
                (CDR (CAR K))
                (TRIECHILD C (CDR K)))
            (TRIECHILD C (CDR K)))))

  dnl  -------------------------------------------------------------------------
  dnl | A trie containing the Scheme keywords.
  dnl  -------------------------------------------------------------------------
  (KEYWORDS QUOTE (
    (61  (62  ARROW))
    (97  (110 (100 AND)))
    (98  (101 (103 (105 (110 BEGIN)))))
    (99  (97  (115 (101 CASE)))
         (111 (110 (100 COND))))
    (100 (101 (102 (105 (110 (101 DEFINE))))
              (108 (97  (121 DELAY))))
         (111 DO))
    (101 (108 (115 (101 ELSE))))
    (105 (102 IF))
    (108 (97  (109 (98  (100 (97  LAMBDA)))))
         (101 (116 LET
                   (42  LETSTAR)
                   (114 (101 (99  LETREC))))))
    (111 (114 OR))
    (113 (117 (97  (115 (105 (113 (117 (111 (116 (101 QUASIQUOTE))))))))
              (111 (116 (101 QUOTE)))))
    (115 (101 (116 (33  SETBANG))))
    (117 (110 (113 (117 (111 (116 (101 UNQUOTE
                                       (45  (115 (112 (108 (105 (99  (105 (110 (103 UNQUOTESPLICING))))))))))))))))
      ))

  dnl  =========================================================================
  dnl | Helper functions
  dnl  =========================================================================

  (ISCONS LAMBDA (E) (IF (ATOM E) (QUOTE F) (QUOTE T)))
  (IST LAMBDA (C) (OR (EQ C 116) (EQ C 84)))
  (ISF LAMBDA (C) (OR (EQ C 102) (EQ C 70)))
  (ISB LAMBDA (C) (OR (EQ C 98) (EQ C 66)))
  (ISO LAMBDA (C) (OR (EQ C 111) (EQ C 79)))
  (ISD LAMBDA (C) (OR (EQ C 100) (EQ C 68)))
  (ISX LAMBDA (C) (OR (EQ C 120) (EQ C 88)))
  (ISE LAMBDA (C) (OR (EQ C 101) (EQ C 69)))
  (ISI LAMBDA (C) (OR (EQ C 105) (EQ C 73)))
  (ISN LAMBDA (C) (OR (EQ C 110) (EQ C 78)))
  (ISS LAMBDA (C) (OR (EQ C 115) (EQ C 83)))
  (ISP LAMBDA (C) (OR (EQ C 112) (EQ C 80)))
  (ISNUMBERPREFIX LAMBDA (C)
    (CONTAINS (TOLOWER C) (QUOTE (98 111 100 120 105 101))))
  (ISINRANGE LAMBDA (X MIN MAX)
    (AND (LEQ MIN X) (LEQ X MAX)))
  (ISDIGIT LAMBDA (C) (ISINRANGE C 48 57))
  (ISNONZERODIGIT LAMBDA (C) (ISINRANGE C 49 57))
  (CONTAINS LAMBDA (E L)
    (IF (ISNIL L)
        (QUOTE F)
        (OR (EQ E (CAR L)) (CONTAINS E (CDR L)))))
  (ISUPPER LAMBDA (C)
    (ISINRANGE C 65 90))
  (ISLOWER LAMBDA (C)
    (ISINRANGE C 97 122))
  (TOLOWER LAMBDA (C)
    (IF (ISUPPER C) (ADD C 32) C))
  (ISLETTER LAMBDA (C)
    (OR (ISUPPER C) (ISLOWER C)))
  (ISWHITESPACE LAMBDA (C)
    (CONTAINS C (QUOTE (32 9 10 13 0))))
  (ISDOT LAMBDA (C) (EQ C 46))
  (ISPOUND LAMBDA (C) (EQ C 35))
  (ISQUOTE LAMBDA (C) (EQ C 39))
  (ISOPENPAREN LAMBDA (C) (EQ C 40))
  (ISCLOSEPAREN LAMBDA (C) (EQ C 41))
  (ISNEWLINE LAMBDA (C) (EQ C 10))
  (ISSEMI LAMBDA (C) (EQ C 59))
  (ISSPECIALINITIAL LAMBDA (C)
    (CONTAINS C
      (QUOTE (33 36 37 38 42 47 58 60 61 62 63 126 95 94))))
  (ISRADIXMARKER LAMBDA (C)
    (CONTAINS (TOLOWER C) (QUOTE (98 100 111 120))))
  (ISEXACTMARKER LAMBDA (C)
    (OR (ISE C) (ISI C)))
  (ISDIGITBIN LAMBDA (C)
    (OR (EQ C 48) (EQ C 49)))
  (ISDIGITOCT LAMBDA (C)
    (ISINRANGE C 48 55))
  (ISDIGITDEC LAMBDA (C) (ISDIGIT C))
  (ISDIGITHEX LAMBDA (C)
    (OR (ISDIGIT C) (ISINRANGE (TOLOWER C) 97 102)))
  (DIGITVALUEBIN LAMBDA (C)
    (IF (ISDIGITBIN C) (SUB C 48) -1))
  (DIGITVALUEOCT LAMBDA (C)
    (IF (ISDIGITOCT C) (SUB C 48) -1))
  (DIGITVALUEDEC LAMBDA (C)
    (IF (ISDIGITDEC C) (SUB C 48) -1))
  (DIGITVALUEHEX LAMBDA (C)
    (IF (ISDIGITDEC C)
        (SUB C 48)
        (IF (ISINRANGE C 97 102)
            (SUB C 87)
            (IF (ISINRANGE C 65 70)
                (SUB C 55)
                -1))))
  (ISEXPONENTMARKER LAMBDA (C)
    (CONTAINS (TOLOWER C) (QUOTE (101 115 102 100 108))))
  (ISIMAGUNIT LAMBDA (C) (ISI C))
  (ISSIGN LAMBDA (C) (OR (EQ C 43) (EQ C 45)))
  (ISPLUS LAMBDA (C) (EQ C 43))
  (ISMINUS LAMBDA (C) (EQ C 45))
  (ISDQUOTE LAMBDA (C) (EQ C 34)) 
  (ISBACKQUOTE LAMBDA (C) (EQ C 96))
  (ISCOMMA LAMBDA (C) (EQ C 44))
  (ISATSIGN LAMBDA (C) (EQ C 64))
  (ISDELIM LAMBDA (C)
    (OR (ISWHITESPACE C)
        (CONTAINS C
          (QUOTE (40 41 34 59)))))
  (ISSLASH LAMBDA (C) (EQ C 47))
  (ISBACKSLASH LAMBDA (C) (EQ C 92))
  (ISINITIAL LAMBDA (C)
    (OR (ISLETTER C) (ISSPECIALINITIAL C)))
  (ISSPECIALSUBSEQUENT LAMBDA (C)
    (CONTAINS C
      (QUOTE (43 45 46))))
  (ISSUBSEQUENT LAMBDA (C)
    (OR (ISINITIAL C) (OR (ISDIGIT C) (ISSPECIALSUBSEQUENT C))))

  (DROPWHITESPACE LAMBDA (IN) (LET
    (IF (ISWHITESPACE C)
        (DROPWHITESPACE (CDR IN))
        IN)
    (C CAR (FORCE* IN))))

  (DROPCOMMENT LAMBDA (IN) (LET
    (IF (ISNEWLINE C)
        (CDR IN)
        (DROPCOMMENT (CDR IN)))
    (C CAR (FORCE* IN))))

')dnl
