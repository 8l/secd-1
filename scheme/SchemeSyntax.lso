dnl  ===========================================================================
dnl | Grammar for Scheme (R5RS) syntax
dnl |
dnl | See http://www.schemers.org/Documents/Standards/R5RS for details
dnl |
dnl | The following grammar is structured as a list of items of the form:
dnl |
dnl |   (<non-terminal> (<right-hand-side-1>) (<right-hand-side-2>) ... ), or
dnl |   (<terminal>)
dnl |
dnl | where <non-terminal> is a non-terminal symbol, and is followed by a list
dnl | one or more production rules for that symbol, or where <terminal> is a
dnl | terminal symbol, and thus has no production rules.  Each production rule
dnl | <right-hand-side-#> is a list of the symbols on the right hand side of the
dnl | production rule.  The production rule NIL denotes a production of the form
dnl |
dnl |   <non-terminal>  -->  <empty-string>
dnl |
dnl | There is a special non-terminal symbol "START" which must have exactly one
dnl | production rule.
dnl  ===========================================================================
ifdef(`scheme_syntax_lso_m4',,`define(`scheme_syntax_lso_m4',1)dnl

(SchemeGrammar MACRO NIL (LIST

dnl  ---------------------------------------------------------------------------
dnl | Root Production Rule
dnl  ---------------------------------------------------------------------------

  (: START (=> (Program)))



dnl  ---------------------------------------------------------------------------
dnl | Helper Rules
dnl  ---------------------------------------------------------------------------

  (: Identifier*
    (=> NIL)
    (=>* (Identifier* IDENT) (CONS _2 _1)))
  (: Variable*
    (=> NIL)
    (=>1 (Variable+)))
  (: Variable+
    (=> (VARIABLE))
    (=>* (Variable+ VARIABLE) (CONS _2 _1)))



dnl  ---------------------------------------------------------------------------
dnl | Terminals
dnl  ---------------------------------------------------------------------------

  (: AND)
  (: ARROW)
  (: BACKQUOTE)
  (: BEGIN)
  (: BOOL)
  (: CASE)
  (: CHAR)
  (: CLOSEP)
  (: COMMA)
  (: COMMAAT)
  (: COND)
  (: DEFINE)
  (: DEFINESYNTAX)
  (: DELAY)
  (: DO)
  (: DOT)
  (: ELLIPSIS)
  (: ELSE)
  (: IDENT)
  (: IF)
  (: KEYWORD)
  (: KEYWORDQUOTE)
  (: LAMBDA)
  (: LET)
  (: LETREC)
  (: LETRECSYNTAX)
  (: LETSTAR)
  (: LETSYNTAX)
  (: NUMBER)
  (: OPENP)
  (: OPENVEC)
  (: OR)
  (: QUOTE)
  (: SETBANG)
  (: STRING)
  (: SYNTAXRULES)
  (: VARIABLE)



dnl  ---------------------------------------------------------------------------
dnl | 7.1.2  External Representations
dnl  ---------------------------------------------------------------------------

  (: Datum
    (=>1 (SimpleDatum))
    (=>1 (CompoundDatum)))
  (: Datum*
    (=> NIL)
    (=>1 (Datum+)))
  (: Datum+
    (=> (Datum))
    (=>* (Datum+ Datum) (CONS _2 _1)))
  (: SimpleDatum
    (=>1 (BOOL))
    (=>1 (NUMBER))
    (=>1 (CHAR))
    (=>1 (STRING))
    (=>1 (Symbol)))
  (: Symbol
    (=>1 (VARIABLE)))
  (: CompoundDatum
    (=>1 (List))
    (=>1 (Vector)))
  (: List
    (=>* (OPENP Datum* CLOSEP)              (REVERSE _2))
    (=>* (OPENP Datum+ DOT Datum CLOSEP)    (APPEND (REVERSE _2) _4))
    (=>1 (Abbreviation)))
  (: Abbreviation
    (=> (AbbrevPrefix Datum)))
  (: AbbrevPrefix
    (=>1 (QUOTE))
    (=>1 (BACKQUOTE))
    (=>1 (COMMA))
    (=>1 (COMMAAT)))
  (: Vector
    (=>* (OPENVEC Datum* CLOSEP)            (LIST (QUOTE Vector) (REVERSE _2))))



dnl  ---------------------------------------------------------------------------
dnl | 7.1.3  Expressions
dnl  ---------------------------------------------------------------------------

  (: Expression
    (=>1 (VARIABLE))
    (=>1 (Literal))
    (=>1 (ProcedureCall))
    (=>1 (LambdaExpression))
    (=>1 (Conditional))
    (=>1 (Assignment))
    (=>1 (DerivedExpression))
    (=>1 (MacroUse))
    (=>1 (MacroBlock)))
  (: Literal
    (=>1 (Quotation))
    (=>1 (SelfEvaluating)))
  (: SelfEvaluating
    (=>1 (BOOL))
    (=>1 (NUMBER))
    (=>1 (CHAR))
    (=>1 (STRING)))
  (: Quotation
    (=>* (QUOTE Datum)                           (LIST (QUOTE Quotation) _2))
    (=>* (OPENP KEYWORDQUOTE Datum CLOSEP)       (LIST (QUOTE Quotation) _3)))
  (: ProcedureCall
    (=>* (OPENP Operator Operand+ CLOSEP)        (LIST (QUOTE ProcedureCall) _2 (REVERSE _3)))
    (=>* (OPENP Operator CLOSEP)                 (LIST (QUOTE ProcedureCall) _2 (QUOTE NIL))))
  (: Operator
    (=>1 (Expression)))
  (: Operand
    (=>1 (Expression)))
  (: Operand*
    (=> NIL)
    (=>* (Operand* Operand) (CONS _2 _1)))
  (: Operand+
    (=> (Operand))
    (=>* (Operand+ Operand) (CONS _2 _1)))
  (: LambdaExpression
    (=>* (OPENP LAMBDA Formals Body CLOSEP)      (LIST (QUOTE LambdaExpression) _3 _4)))
  (: Formals
    (=>* (OPENP Variable* CLOSEP)                (REVERSE _2))
    (=>1 (VARIABLE))
    (=>* (OPENP Variable+ DOT VARIABLE CLOSEP)   (APPEND (REVERSE _2) _4)))
  (: Body
    (=>* (Definition* Sequence)                  (LIST (QUOTE Body) (REVERSE _1) _2)))
  (: Sequence
    (=>1 (Expression))
    (=>* (Command+ Expression)                   (APPEND (REVERSE _1) _2)))
  (: Command
    (=>1 (Expression)))
  (: Command*
    (=> NIL)
    (=>* (Command* Command) (CONS _2 _1)))
  (: Command+
    (=> (Command))
    (=>* (Command+ Command) (CONS _2 _1)))
  (: Conditional
    (=>* (OPENP IF Test Consequent Alternate CLOSEP)
                                                 (LIST (QUOTE If) _3 _4 _5)))
  (: Test
    (=>1 (Expression)))
  (: Consequent
    (=>1 (Expression)))
  (: Alternate
    (=>1 (Expression))
    (=> NIL))
  (: Assignment
    (=>* (OPENP SETBANG VARIABLE Expression CLOSEP)
                                                 (LIST (QUOTE Assignment) _3 _4)))
  (: DerivedExpression
    (=>* (OPENP COND CondClause+ CLOSEP)         (LIST (QUOTE Conditional) (REVERSE _3) (QUOTE NIL)))
    (=>* (OPENP COND CondClause+ OPENP ELSE Sequence CLOSEP CLOSEP)
                                                 (LIST (QUOTE Conditional) (REVERSE _3) _6))
    (=>* (OPENP COND OPENP ELSE Sequence CLOSEP CLOSEP)
                                                 (LIST (QUOTE Conditional) (QUOTE NIL) _5))
    (=>* (OPENP CASE Expression CaseClause+ CLOSEP)
                                                 (LIST (QUOTE Case) _3 (REVERSE _4) (QUOTE NIL)))
    (=>* (OPENP CASE Expression CaseClause+ OPENP ELSE Sequence CLOSEP CLOSEP)
                                                 (LIST (QUOTE Case) _3 (REVERSE _4) _7))
    (=>* (OPENP CASE Expression OPENP ELSE Sequence CLOSEP CLOSEP)
                                                 (LIST (QUOTE Case) _3 (QUOTE NIL) _6))
    (=>* (OPENP AND Test* CLOSEP)                (LIST (QUOTE And) (REVERSE _3)))
    (=>* (OPENP OR Test* CLOSEP)                 (LIST (QUOTE Or) (REVERSE _3)))
    (=>* (OPENP LET OPENP BindingSpec* CLOSEP Body CLOSEP)
                                                 (LIST (QUOTE Let) (QUOTE NIL) (REVERSE _4) _6))
    (=>* (OPENP LET VARIABLE OPENP BindingSpec* CLOSEP Body CLOSEP)
                                                 (LIST (QUOTE Let) _3 (REVERSE _5) _7))
    (=>* (OPENP LETSTAR OPENP BindingSpec* CLOSEP Body CLOSEP)
                                                 (LIST (QUOTE Let*) (REVERSE _4) _6))
    (=>* (OPENP LETREC OPENP BindingSpec* CLOSEP Body CLOSEP)
                                                 (LIST (QUOTE LetRec) (REVERSE _4) _6))
    (=>* (OPENP BEGIN Sequence CLOSEP)           (LIST (QUOTE Sequence) _3))
    (=>* (OPENP DO OPENP IterationSpec* CLOSEP OPENP Test DoResult CLOSEP Sequence CLOSEP)
                                                 (LIST (QUOTE Do) (REVERSE _4) _7 _8 (NTH _0 10)))
    (=>* (OPENP DO OPENP IterationSpec* CLOSEP OPENP Test DoResult CLOSEP CLOSEP)
                                                 (LIST (QUOTE Do) (REVERSE _4) _7 _8 (QUOTE NIL)))
    (=>* (OPENP DELAY Expression CLOSEP)         (LIST (QUOTE Delay) _3)))
  (: CondClause
    (=>* (OPENP Test Sequence CLOSEP)            (LIST (QUOTE CondClause) (QUOTE Sequence) _2 _3))
    (=>* (OPENP Test CLOSEP)                     (LIST (QUOTE CondClause) (QUOTE Self) _2))
    (=>* (OPENP Test ARROW Recipient CLOSEP)     (LIST (QUOTE CondClause) (QUOTE Recipient) _2 _4)))
  (: CondClause*
    (=> NIL)
    (=>* (CondClause* CondClause) (CONS _2 _1)))
  (: CondClause+
    (=> (CondClause))
    (=>* (CondClause+ CondClause) (CONS _2 _1)))
  (: Recipient
    (=>1 (Expression)))
  (: CaseClause
    (=>* (OPENP OPENP Datum* CLOSEP Sequence CLOSEP)
                                                 (LIST (QUOTE CaseClause) (REVERSE _3) _5)))
  (: BindingSpec
    (=>* (OPENP VARIABLE Expression CLOSEP)      (LIST (QUOTE BindingSpec) _2 _3)))
  (: IterationSpec
    (=>* (OPENP VARIABLE Init Step CLOSEP)       (LIST (QUOTE IterationSpec) _2 _3 _4))
    (=>* (OPENP VARIABLE Init CLOSEP)            (LIST (QUOTE IterationSpec) _2 _3)))
  (: Init
    (=>1 (Expression)))
  (: Step
    (=>1 (Expression)))
  (: DoResult
    (=>1 (Sequence))
    (=> NIL))
  (: MacroUse
    (=>* (OPENP Keyword Datum* CLOSEP)           (LIST (QUOTE MacroUse) _2 (REVERSE _3))))
  (: Keyword
    (=>1 (IDENT)))
  (: MacroBlock
    (=> (OPENP LETSYNTAX OPENP SyntaxSpec* CLOSEP Body CLOSEP))
    (=> (OPENP LETRECSYNTAX OPENP SyntaxSpec* CLOSEP Body CLOSEP)))
  (: SyntaxSpec
    (=> (OPENP Keyword TransformerSpec CLOSEP)))



dnl  ---------------------------------------------------------------------------
dnl | 7.1.5  Transformers
dnl  ---------------------------------------------------------------------------

  (: TransformerSpec
    (=> (OPENP SYNTAXRULES OPENP Identifier* CLOSEP SyntaxRule* CLOSEP)
                                                  (LIST (QUOTE TransformerSpec) (REVERSE _4) (REVERSE _6))))
  (: SyntaxRule
    (=>* (OPENP Pattern Template CLOSEP)          (LIST (QUOTE SyntaxRule) _2 _3)))
  (: SyntaxRule*
    (=> NIL)
    (=>* (SyntaxRule* SyntaxRule) (CONS _2 _1)))
  (: Pattern
    (=>* (PatternIdentifier)                      (LIST (QUOTE Pattern) (QUOTE SExp) (QUOTE F) _1))
    (=>* (OPENP Pattern* CLOSEP)                  (LIST (QUOTE Pattern) (QUOTE SExp) (QUOTE F) (REVERSE _2)))
    (=>* (OPENP Pattern+ DOT Pattern CLOSEP)      (LIST (QUOTE Pattern) (QUOTE SExp) (QUOTE F) (APPEND (REVERSE _2) _4)))
    (=>* (OPENP Pattern+ ELLIPSIS CLOSEP)         (LIST (QUOTE Pattern) (QUOTE SExp) (QUOTE T) (REVERSE _2)))
    (=>* (OPENVEC Pattern* CLOSEP)                (LIST (QUOTE Pattern) (QUOTE Vector) (QUOTE F) (REVERSE _2)))
    (=>* (OPENVEC Pattern+ ELLIPSIS CLOSEP)       (LIST (QUOTE Pattern) (QUOTE Vector) (QUOTE T) (REVERSE _2)))
    (=>* (PatternDatum)                           (LIST (QUOTE Pattern) (QUOTE SExp) (QUOTE F) _1)))
  (: Pattern*
    (=> NIL)
    (=>1 (Pattern+)))
  (: Pattern+
    (=> (Pattern))
    (=>* (Pattern+ Pattern) (CONS _2 _1)))
  (: PatternDatum
    (=>1 (STRING))
    (=>1 (CHAR))
    (=>1 (BOOL))
    (=>1 (NUMBER)))
  (: Template
    (=>1 (PatternIdentifier))
    (=> (OPENP TemplateElement* CLOSEP))
    (=> (OPENP TemplateElement+ DOT Template CLOSEP))
    (=> (OPENVEC TemplateElement* CLOSEP))
    (=>1 (TemplateDatum)))
  (: TemplateElement
    (=>1 (Template))
    (=> (Template ELLIPSIS)))
  (: TemplateElement*
    (=> NIL)
    (=>1 (TemplateElement+)))
  (: TemplateElement+
    (=> (TemplateElement))
    (=>* (TemplateElement+ TemplateElement) (CONS _2 _1)))
  (: TemplateDatum
    (=>1 (PatternDatum)))
  (: PatternIdentifier
    (=>1 (VARIABLE)))         dnl --- TODO: Should accept any identifier except "..."



dnl  ---------------------------------------------------------------------------
dnl | 7.1.6  Programs and Definitions
dnl  ---------------------------------------------------------------------------

  (: Program (=> (CommandOrDefinition*)))
  (: CommandOrDefinition
    (=>1 (Command))
    (=>1 (Definition))
    (=>1 (SyntaxDefinition)))
dnl    (=> (OPENP BEGIN CommandAndDefinition+ CLOSEP)))
        dnl ^-- This production rule causes inherent ambiguities in the Scheme
        dnl     grammar, since (OPENP BEGIN Definition+ CLOSEP) and
        dnl     (OPENP BEGIN Command+ CLOSEP) are both accounted for by
        dnl     production rules for "Definition" and for "DerivedExpression",
        dnl     respectively.  This rule essentially serves as a catch-all for
        dnl     (OPENP BEGIN ... CLOSEP) blocks which either contain syntax
        dnl     definitions or contain BOTH commands AND definitions.  Until we
        dnl     can implement a proper solution for this case, I am leaving this
        dnl     production rule out.
  (: CommandOrDefinition*
    (=> NIL)
    (=>1 (CommandOrDefinition+)))
  (: CommandOrDefinition+
    (=> (CommandOrDefinition))
    (=>* (CommandOrDefinition+ CommandOrDefinition) (CONS _2 _1)))
  (: Definition
    (=>* (OPENP DEFINE VARIABLE Expression CLOSEP)
                                                 (LIST (QUOTE Definition) _3 _4))
    (=>* (OPENP DEFINE OPENP DefFormals CLOSEP Body CLOSEP)
                                                 (LIST (QUOTE Definition) (CAR _4) (LIST (QUOTE LambdaExpression) (CDR _4) _6)))
    (=>* (OPENP BEGIN Definition+ CLOSEP)        _3))
  (: Definition*
    (=> NIL)
    (=>* (Definition* Definition) (CONS _2 _1)))
  (: Definition+
    (=> (Definition))
    (=>* (Definition+ Definition) (CONS _2 _1)))
  (: DefFormals
    (=>* (Variable+)                             (REVERSE _1))
    (=>* (Variable+ DOT VARIABLE)                (APPEND (REVERSE _1) _3)))
  (: SyntaxDefinition
    (=>* (OPENP DEFINESYNTAX IDENT TransformerSpec CLOSEP)
                                                 (LIST (QUOTE SyntaxDefinition) _3 _4)))
  (: CaseClause*
    (=> NIL)
    (=>1 (CaseClause+)))
  (: CaseClause+
    (=> (CaseClause))
    (=>* (CaseClause+ CaseClause) (CONS _2 _1)))
  (: BindingSpec*
    (=> NIL)
    (=>* (BindingSpec* BindingSpec) (CONS _2 _1)))
  (: IterationSpec*
    (=> NIL)
    (=>* (IterationSpec* IterationSpec) (CONS _2 _1)))
  (: SyntaxSpec*
    (=> NIL)
    (=>* (SyntaxSpec* SyntaxSpec) (CONS _2 _1)))
  (: Test*
    (=> NIL)
    (=>* (Test* Test) (CONS _2 _1)))
dnl  ---------------------------------------------------------------------------
  ))

')dnl
