dnl  ===========================================================================
dnl | Grammar for Scheme (R5RS) syntax
dnl |
dnl | See http://www.schemers.org/Documents/Standards/R5RS for details
dnl |
dnl | The following grammar is structured as a list of items of the form:
dnl |
dnl |   (<non-terminal> (<right-hand-side-1>) (<right-hand-side-2>) ... ), or
dnl |   (<terminal>)
dnl |
dnl | where <non-terminal> is a non-terminal symbol, and is followed by a list
dnl | one or more production rules for that symbol, or where <terminal> is a
dnl | terminal symbol, and thus has no production rules.  Each production rule
dnl | <right-hand-side-#> is a list of the symbols on the right hand side of the
dnl | production rule.  The production rule NIL denotes a production of the form
dnl |
dnl |   <non-terminal>  -->  <empty-string>
dnl |
dnl | There is a special non-terminal symbol "START" which must have exactly one
dnl | production rule.
dnl  ===========================================================================
ifdef(`scheme_syntax_lso_m4',,`define(`scheme_syntax_lso_m4',1)dnl

(SchemeGrammar QUOTE (

dnl  ---------------------------------------------------------------------------
dnl | Root Production Rule
dnl  ---------------------------------------------------------------------------

  (START (Program))



dnl  ---------------------------------------------------------------------------
dnl | Helper Rules
dnl  ---------------------------------------------------------------------------

  (ZeroOrMoreIdentifier
    NIL
    (ZeroOrMoreIdentifier IDENT))
  (ZeroOrMoreVariable
    NIL
    (OneOrMoreVariable))
  (OneOrMoreVariable
    (VARIABLE)
    (OneOrMoreVariable VARIABLE))



dnl  ---------------------------------------------------------------------------
dnl | Terminals
dnl  ---------------------------------------------------------------------------

  (AND)
  (ARROW)
  (BACKQUOTE)
  (BEGIN)
  (BOOL)
  (CASE)
  (CHAR)
  (CLOSEP)
  (COMMA)
  (COMMAAT)
  (COND)
  (DEFINE)
  (DEFINESYNTAX)
  (DELAY)
  (DO)
  (DOT)
  (ELLIPSIS)
  (ELSE)
  (IDENT)
  (IF)
  (KEYWORD)
  (KEYWORDQUOTE)
  (LAMBDA)
  (LET)
  (LETREC)
  (LETRECSYNTAX)
  (LETSTAR)
  (LETSYNTAX)
  (NUMBER)
  (OPENP)
  (OPENVEC)
  (OR)
  (QUOTE)
  (SETBANG)
  (STRING)
  (SYNTAXRULES)
  (VARIABLE)



dnl  ---------------------------------------------------------------------------
dnl | 7.1.2  External Representations
dnl  ---------------------------------------------------------------------------

  (Datum
    (SimpleDatum)
    (CompoundDatum))
  (ZeroOrMoreDatum
    NIL
    (OneOrMoreDatum))
  (OneOrMoreDatum
    (Datum)
    (OneOrMoreDatum Datum))
  (SimpleDatum
    (BOOL)
    (NUMBER)
    (CHAR)
    (STRING)
    (Symbol))
  (Symbol
	(VARIABLE))
  (CompoundDatum
    (List)
    (Vector))
  (List
    (OPENP ZeroOrMoreDatum CLOSEP)
    (OPENP OneOrMoreDatum DOT Datum CLOSEP)
    (Abbreviation))
  (Abbreviation
    (AbbrevPrefix Datum))
  (AbbrevPrefix
    (QUOTE)
    (BACKQUOTE)
    (COMMA)
    (COMMAAT))
  (Vector
    (OPENVEC ZeroOrMoreDatum CLOSEP))



dnl  ---------------------------------------------------------------------------
dnl | 7.1.3  Expressions
dnl  ---------------------------------------------------------------------------

  (Expression
    (VARIABLE)
    (Literal)
    (ProcedureCall)
    (LambdaExpression)
    (Conditional)
    (Assignment)
    (DerivedExpression)
    (MacroUse)
    (MacroBlock))
  (Literal
    (Quotation)
    (SelfEvaluating))
  (SelfEvaluating
    (BOOL)
    (NUMBER)
    (CHAR)
    (STRING))
  (Quotation
    (QUOTE Datum)
    (OPENP KEYWORDQUOTE Datum CLOSEP))
  (ProcedureCall
    (OPENP Operator OneOrMoreOperand CLOSEP)
    (OPENP Operator CLOSEP))
  (Operator
    (Expression))
  (Operand
    (Expression))
  (ZeroOrMoreOperand
    NIL
    (ZeroOrMoreOperand Operand))
  (OneOrMoreOperand
    (Operand)
    (OneOrMoreOperand Operand))
  (LambdaExpression
    (OPENP LAMBDA Formals Body CLOSEP))
  (Formals
    (OPENP ZeroOrMoreVariable CLOSEP)
    (VARIABLE)
    (OPENP OneOrMoreVariable DOT VARIABLE CLOSEP))
  (Body
    (ZeroOrMoreDefinition Sequence))
  (Sequence
    (Expression)
    (OneOrMoreCommand Expression))
  (Command
    (Expression))
  (ZeroOrMoreCommand
    NIL
    (ZeroOrMoreCommand Command))
  (OneOrMoreCommand
    (Command)
	(OneOrMoreCommand Command))
  (Conditional
    (OPENP IF Test Consequent Alternate CLOSEP))
  (Test
    (Expression))
  (Consequent
    (Expression))
  (Alternate
    (Expression)
    NIL)
  (Assignment
    (OPENP SETBANG VARIABLE Expression CLOSEP))
  (DerivedExpression
    (OPENP COND OneOrMoreCondClause CLOSEP)
    (OPENP COND OneOrMoreCondClause OPENP ELSE Sequence CLOSEP CLOSEP)
    (OPENP COND OPENP ELSE Sequence CLOSEP CLOSEP)
    (OPENP CASE Expression OneOrMoreCaseClause CLOSEP)
    (OPENP CASE Expression OneOrMoreCaseClause OPENP ELSE Sequence CLOSEP CLOSEP)
    (OPENP CASE Expression OPENP ELSE Sequence CLOSEP CLOSEP)
    (OPENP AND ZeroOrMoreTest CLOSEP)
    (OPENP OR ZeroOrMoreTest CLOSEP)
    (OPENP LET OPENP ZeroOrMoreBindingSpec CLOSEP Body CLOSEP)
    (OPENP LET VARIABLE OPENP ZeroOrMoreBindingSpec CLOSEP Body CLOSEP)
    (OPENP LETSTAR OPENP ZeroOrMoreBindingSpec CLOSEP Body CLOSEP)
    (OPENP LETREC OPENP ZeroOrMoreBindingSpec CLOSEP Body CLOSEP)
    (OPENP BEGIN Sequence CLOSEP)
    (OPENP DO OPENP ZeroOrMoreIterationSpec CLOSEP OPENP Test DoResult CLOSEP Sequence CLOSEP)
    (OPENP DO OPENP ZeroOrMoreIterationSpec CLOSEP OPENP Test DoResult CLOSEP CLOSEP)
    (OPENP DELAY Expression CLOSEP))
  (CondClause
    (OPENP Test Sequence CLOSEP)
    (OPENP Test CLOSEP)
    (OPENP Test ARROW Recipient CLOSEP))
  (ZeroOrMoreCondClause
    NIL
    (ZeroOrMoreCondClause CondClause))
  (OneOrMoreCondClause
    (CondClause)
    (OneOrMoreCondClause CondClause))
  (Recipient
    (Expression))
  (CaseClause
    (OPENP OPENP ZeroOrMoreDatum CLOSEP Sequence CLOSEP))
  (BindingSpec
    (OPENP VARIABLE Expression CLOSEP))
  (IterationSpec
    (OPENP VARIABLE Init Step CLOSEP)
    (OPENP VARIABLE Init CLOSEP))
  (Init
    (Expression))
  (Step
    (Expression))
  (DoResult
    (Sequence)
    NIL)
  (MacroUse
    (OPENP Keyword ZeroOrMoreDatum CLOSEP))
  (Keyword
    (IDENT))
  (MacroBlock
    (OPENP LETSYNTAX OPENP ZeroOrMoreSyntaxSpec CLOSEP Body CLOSEP)
    (OPENP LETRECSYNTAX OPENP ZeroOrMoreSyntaxSpec CLOSEP Body CLOSEP))
  (SyntaxSpec
    (OPENP Keyword TransformerSpec CLOSEP))



dnl  ---------------------------------------------------------------------------
dnl | 7.1.5  Transformers
dnl  ---------------------------------------------------------------------------

  (TransformerSpec
    (OPENP SYNTAXRULES OPENP ZeroOrMoreIdentifier CLOSEP ZeroOrMoreSyntaxRule CLOSEP))
  (SyntaxRule
    (OPENP Pattern Template CLOSEP))
  (ZeroOrMoreSyntaxRule
    NIL
    (ZeroOrMoreSyntaxRule SyntaxRule))
  (Pattern
    (PatternIdentifier)
    (OPENP ZeroOrMorePattern CLOSEP)
    (OPENP OneOrMorePattern DOT Pattern CLOSEP)
    (OPENP OneOrMorePattern ELLIPSIS CLOSEP)
    (OPENVEC ZeroOrMorePattern CLOSEP)
    (OPENVEC OneOrMorePattern ELLIPSIS CLOSEP)
    (PatternDatum))
  (ZeroOrMorePattern
    NIL
    (OneOrMorePattern))
  (OneOrMorePattern
    (Pattern)
    (OneOrMorePattern Pattern))
  (PatternDatum
    (STRING)
    (CHAR)
    (BOOL)
    (NUMBER))
  (Template
    (PatternIdentifier)
    (OPENP ZeroOrMoreTemplateElement CLOSEP)
    (OPENP OneOrMoreTemplateElement DOT Template CLOSEP)
    (OPENVEC ZeroOrMoreTemplateElement CLOSEP)
    (TemplateDatum))
  (TemplateElement
    (Template)
    (Template ELLIPSIS))
  (ZeroOrMoreTemplateElement
    NIL
    (OneOrMoreTemplateElement))
  (OneOrMoreTemplateElement
    (TemplateElement)
    (OneOrMoreTemplateElement TemplateElement))
  (TemplateDatum
    (PatternDatum))
  (PatternIdentifier
    (VARIABLE))			dnl --- TODO: Should accept any identifier except "..."



dnl  ---------------------------------------------------------------------------
dnl | 7.1.6  Programs and Definitions
dnl  ---------------------------------------------------------------------------

  (Program (ZeroOrMoreCommandOrDefinition))
  (CommandOrDefinition
    (Command)
    (Definition)
    (SyntaxDefinition))
dnl    (OPENP BEGIN OneOrMoreCommandAndDefinition CLOSEP))
		dnl ^-- This production rule causes inherent ambiguities in the Scheme
		dnl     grammar, since (OPENP BEGIN Definition+ CLOSEP) and
		dnl     (OPENP BEGIN Command+ CLOSEP) are both accounted for by
		dnl     production rules for "Definition" and for "DerivedExpression",
		dnl     respectively.  This rule essentially serves as a catch-all for
		dnl     (OPENP BEGIN ... CLOSEP) blocks which either contain syntax
		dnl     definitions or contain BOTH commands AND definitions.  Until we
		dnl     can implement a proper solution for this case, I am leaving this
		dnl     production rule out.
  (ZeroOrMoreCommandOrDefinition
    NIL
    (OneOrMoreCommandOrDefinition))
  (OneOrMoreCommandOrDefinition 
    (CommandOrDefinition)
    (OneOrMoreCommandOrDefinition CommandOrDefinition))
  (Definition
    (OPENP DEFINE VARIABLE Expression CLOSEP)
    (OPENP DEFINE OPENP DefFormals CLOSEP Body CLOSEP)
    (OPENP BEGIN OneOrMoreDefinition CLOSEP))
  (ZeroOrMoreDefinition
    NIL
    (ZeroOrMoreDefinition Definition))
  (OneOrMoreDefinition
    (Definition)
	(OneOrMoreDefinition Definition))
  (DefFormals
    (OneOrMoreVariable)
    (OneOrMoreVariable DOT VARIABLE))
  (SyntaxDefinition
    (OPENP DEFINESYNTAX IDENT TransformerSpec CLOSEP))
  (ZeroOrMoreCaseClause
    NIL
    (OneOrMoreCaseClause))
  (OneOrMoreCaseClause
    (CaseClause)
    (OneOrMoreCaseClause CaseClause))
  (ZeroOrMoreBindingSpec
    NIL
    (ZeroOrMoreBindingSpec BindingSpec))
  (ZeroOrMoreIterationSpec
    NIL
    (ZeroOrMoreIterationSpec IterationSpec))
  (ZeroOrMoreSyntaxSpec
    NIL
    (ZeroOrMoreSyntaxSpec SyntaxSpec))
  (ZeroOrMoreTest
    NIL
    (ZeroOrMoreTest Test))
dnl  ---------------------------------------------------------------------------
  ))

')dnl
