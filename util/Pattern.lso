dnl  ===========================================================================
dnl | Pattern matching
dnl  ===========================================================================
ifdef(`pattern_lso_m4',,`define(`pattern_lso_m4',1)dnl

include(Util.lso)

  dnl  -------------------------------------------------------------------------
  dnl | Determines if X matches the specified pattern and optionally extracts
  dnl | matching elements into a list.
  dnl | 
  dnl | A number or symbol in the pattern must match the corresponding number
  dnl | or symbol in X.  A cons cell in the pattern must match a cons cell in
  dnl | X, and the car and the cdr of the cons cell must match the car and cdr
  dnl | of the corresponding cell in X.  Note that, since a list is built from
  dnl | cons cells, this means that a list of n elements in the pattern must
  dnl | match a list of n elements in X, and corresponding elements of the list
  dnl | and of the pattern must match.
  dnl |
  dnl | The following symbols act as wildcards in the pattern:
  dnl |
  dnl | *  - Matches any object (atomic value or cons cell).
  dnl | _  - Matches any object and specifies that the matching object be
  dnl |      extracted
  dnl | !* - Matches any atom (symbol or number)
  dnl | !_ - Matches any atom and specifies that it be extracted
  dnl | #* - Matches a number
  dnl | #_ - Matches and extracts a number
  dnl | @* - Matches a symbol
  dnl | @_ - Matches and extracts a symbol
  dnl |
  dnl | The pattern "(\ <Y>)" matches only against an exact copy of <Y>.  This
  dnl | can be used when one wants to match a symbol that is normally
  dnl | interpreted as a wildcard.  For example, "(\ *)" in the pattern will
  dnl | match the "*" symbol.  To match the backslash, use the pattern "(\ \)".
  dnl |
  dnl | X = the object to match
  dnl | P = the pattern
  dnl | RETURNS a list of elements extracted from X, if X matches the pattern P,
  dnl |         or the boolean value "F" if X does not match P.  Note that if
  dnl |         X matches P but the pattern P did not specify any elements to
  dnl |         be extracted, the return value will be NIL.
  dnl  -------------------------------------------------------------------------
  (PATTERN LAMBDA (X P)
    (LETREC
      (LET
        (IF (EQ RESULT (QUOTE F))
            (QUOTE F)
            (REVERSE RESULT))
        (RESULT PATTERNCC X P (QUOTE NIL)))
      (REVERSE LAMBDA (X)
        (REVERSECC X (QUOTE NIL)))
      (REVERSECC LAMBDA (X CC)
        (IF (EQ X (QUOTE NIL))
            CC
            (REVERSECC (CDR X) (CONS (CAR X) CC))))
      (PATTERNCC LAMBDA (X P CC)
        (IF (EQ P (QUOTE _))
            (CONS X CC)
        (IF (EQ P (QUOTE *))
            CC
        (IF (EQ P (QUOTE !*))
            (IF (ATOM X)
                CC
                (QUOTE F))
        (IF (EQ P (QUOTE !_))
            (IF (ATOM X)
                (CONS X CC)
                (QUOTE F))
        (IF (EQ P (QUOTE #*))
            (IF (NUMBER X)
                CC
                (QUOTE F))
        (IF (EQ P (QUOTE #_))
            (IF (NUMBER X)
                (CONS X CC)
                (QUOTE F))
        (IF (EQ P (QUOTE @*))
            (IF (SYMBOL X)
                CC
                (QUOTE F))
        (IF (EQ P (QUOTE @_))
            (IF (SYMBOL X)
                (CONS X CC)
                (QUOTE F))
        (IF (ATOM P)
            (IF (EQ X P)
                CC
                (QUOTE F))
        (IF (EQ (CAR P) (QUOTE \))
            (IF (DEEPEQ X (CAR (CDR P)))
                CC
                (QUOTE F))
        (IF (ATOM X)
            (QUOTE F)
            (LET
              (IF (EQ SUBRESULT (QUOTE F))
                  (QUOTE F)
                  (PATTERNCC (CDR X) (CDR P) SUBRESULT))
              (SUBRESULT PATTERNCC (CAR X) (CAR P) CC))))))))))))))))

  dnl  -------------------------------------------------------------------------
  dnl | Matches X against a list of patterns and evaluates the corresponding
  dnl | function against the extracted elements.
  dnl |
  dnl | X = the object to match
  dnl | CASES = A list of lists having the following form:
  dnl |           (PATTERN PREDICATE FUNCTION)
  dnl |         where PATTERN is a pattern as described by the (PATTERN)
  dnl |         function above, and PREDICATE and FUNCTION are functions taking
  dnl |         a number of arguments equal to the number of elements extracted
  dnl |         by PATTERN.  If PATTERN matches X, the extracted elements will
  dnl |         be passed to PREDICATE (if present).  For the first entry in
  dnl |         CASES for which PATTERN matches and PREDICATE evaluates to true,
  dnl |         the extracted elements will be passed to the corresponding
  dnl |         FUNCTION as its arguments.
  dnl | RETURNS the result of from the function corresponding to the first
  dnl |         matching pattern in CASES for which PREDICATE evaluates to true,
  dnl |         applied to the extracted elements, or (QUOTE NOMATCH) if no
  dnl |         pattern in CASES match X.
  dnl  -------------------------------------------------------------------------
  (_MATCH LAMBDA (X CASES)
    (IF (ISNIL CASES)
        (QUOTE NOMATCH)
        (LET
          (LET
            (LET
              (IF (EQ ARGS (QUOTE F))
                  (_MATCH X (CDR CASES))
                  (LET
                    (IF (APPLY P ARGS)
                        (APPLY F ARGS)
                        (_MATCH X (CDR CASES)))
                    (P CAR (CDR CASE))
                    (F CAR (CDR (CDR CASE)))))
              (ARGS PATTERN X PAT))
            (PAT CAR CASE))
          (CASE CAR CASES))))

  (MATCH MACRO (X . CASES)
    (_MATCH X (LIST . CASES)))

  (CASE?* MACRO (ARGS PAT P F)
    (LIST (QUOTE PAT)
      (LAMBDA _0
        (LET
          (APPLY P* _0)
          (P* LAMBDA ARGS P)))
      (LAMBDA _0
        (LET
          (APPLY F* _0)
          (F* LAMBDA ARGS F)))))

  (CASE*? MACRO (ARGS PAT P F) (CASE?* ARGS PAT P F))
  (CASE* MACRO (ARGS PAT F) (CASE*? ARGS PAT (QUOTE T) F))
  (CASE? MACRO (PAT P F) (CASE?* (_1 _2 _3 _4 _5 _6 _7 _8 _9) PAT P F))
  (CASE MACRO (PAT F) (CASE? PAT (QUOTE T) F))
          
')dnl
